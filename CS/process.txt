- 운영체제
    - 한정된 컴퓨터 자원을 관리하는 목적이 중요함
        - 처리 능력 향상
        - 반환시간 단축
        - 사용 가능도 향상
        - 신뢰도 향상
- CPU 와 메모리 구조
    - cpu[중앙처리 장치 (프로세서)] 는 컴퓨터의 뇌 역할
        - 프로그램을 실행하는데 필요한 연산을 처리하고 수행한다.
    - 프로그램 실행 → OS 가 디스크에 있는 프로그램을 메모리로 로드 → 로드된 프로그램 = 프로세스 이것을 CPU 가 처리한다.
    - CPU는 하나의 프로세스만 처리함 따라서 멀티 프로세스 환경에서는 OS 가 스케줄링하여 CPU 에 프로세스 할당

- 메모리
    - 데이터 저장 기억장치
    - 휘발성 메모리인 주기억장치(메인메모리이며 RAM), 비휘발성 메모리인 보조 기억장치 (SSD(Solid State Driver), HDD(Hard Disk Driver) 등)
- 구조 정리 (위로 갈수록 속도 빠름)
    - CPU
        - 레지스터 : CPU 가 사용자 요청 처리 위한 데이터를 임시 저장 기억장치
        - 캐시 : CPU 와 RAM 사이의 속도 차이를 해결하기 위한 기억 장치
    - 메모리
        - RAM(Random Access Memory) : 휘발성 기억장치, 컴퓨터에서 실행되는 프로그램에 필요한 정보 저장
        - 하드디스크(hard disk) : 비휘발성 기억장치, 사용자가 필요한 데이터와 프로그램 저장

    #휘발성: 전원공급 중단시 저장된 정보 사라짐
    #로드 : 프로그램을 메모리에 올려 공간할당

- OS
    - 커널
    - 프로세스 보안, 자원 관리, 하드웨어 추상화, CPU 스케줄링, 메모리관리, 입출력 관리등
    - 커널모드/사용자모드
        - 커널모드에서 하드웨어 직접 접근 메모리, CPU 자원 사용
        - 사용자모드에서는 위 자원에 직접 접근 불가
    - 시스템 콜 : 사용자 모드에서 실행된 프로세스가 자원에 접근 시 시스템 콜을 요청하여 커널에 요청하는 시스템 함수
        - fork() : 프로세스 생성
        - wait() : 부모프로세스가 자식 프로세스의 수행 기다림

- 프로세스 : 컴퓨터에서 실행 중인 하나의 프로그램(특정 작업 수행 명령어 집합, 메모리에 로드된 프로그램)
    - OS 는 프로그램을 실행하면서 디스크에 저장된 데이터를 메모리에 로드
    - OS 로부터 독립된 메모리 영역을 할당받음
    - 프로세스의 메모리 영역 구조 (위로갈수록 높은 주소 값)
        - 스택
            - 지역변수, 함수의 매개변수, 반환되는 주소 값 등이 저장
            - 영역크기 컴파일 때 결정
            - LIFO(Last In First Out)
            - 높은 주소값에서 낮은 주소값을 사용
        - 힙
            - 사용자에 의해 동적 메모리 할당이 발생
            - 영역크기 런타임 때 결정
            - FIFO(First In First Out)
            - 낮은 주소값에서 높은 주소값 순서로 사용

        - 스택영역과 힙 영역은 동적 메모리 할당 가능, 두 영역 사이 빈 메모리 공간 존재, 메모리 영역 공유함
        - 스택오버플로우 : 스택 영역이 힙 영역 침범
        - 힙 오버플로우: 힙 영역이 스택 영역 침범
        - 오버플로 : 메모리 공간에서 할당할 수 있는 최대 범위 초가

        - 데이터
            - 전역변수, 정적 변수, 배열, 구조체 등 저장
            - 영역
                - BSS(Block Stated Symbol) 영역 : 초기화 하지 않은 변수 저장
                - 데이터 영역 : 초기화한 변수 저장
        - 코드 (텍스트 영역)
            - 실행할 코드가 기계어로 컴파일되어 저장되는 영역
    - PCB(Process Control Block)
        - OS 가 프로세스를 제어하기 위해 프로세스 정보 저장하는 것
        - 프로세스 현재 상태, PID, PC(Program Counter 다음 실행할 명령어의 주소), 프로세스 우선순위, 메모리 제한 등을 저장함)
    - 프로세스 생성
        - 기존 프로세스 → fork() 함수 호출 → 새로운 프로세스 생성
        - 기존 프로세스 : 부모 프로세스(자식프로세스의 PID 값 반환), 복사된 프로세스 : 자식 프로세스(0 반환)
    - 프로세스 상태도
        - 생성 : 프로세스가 PCB 가지나 OS 승인 전
        - 대기 : OS 로부터 승인받은 후 준비 큐에서 CPU 할당 기다림
        - 실행 : 프로세스가 CPU 를 할당받아 실행함
        - 대기 : 프로세스가 입출력이나 이벤트 발생 기다려야 해서 CPU 사용 멈추고 기다림
        - 종료 : 프로세스 실행 종료
- 스레드 : 프로세스에서 실제로 실행되는 흐름의 단위
    - 지역변수를 저장하는 스택 영역 할당받고 전역 변수를 저장하는 힙 영역은 다른 스레드와 공유함
    - 멀티 스레드 : 멀티 스레드는 스레드 간에 힙, 데이터, 코드 영역을 공유함
        - 콘텍스트 스위칭 시 오버헤드가 적음
        - IPC 사용하지 않아도 되서 멀티 프로세스의 단점 보완가능
        - 공유자원에 대한 동기화 필요

- 콘텍스트 스위칭(context switching) : CPU 에서 여러 작업 번갈아 가면서 처리할 때 처리 중인 작업을 교체하는 것
- IPC : 프로세스는 독립적인 메모리를 할당받음 → 프로세스 간 공유 자원이 필요할 때 IPC (Inter Process Communication) 사용 필요
- 소켓 : 네트워크 소켓을 이용하는 프로세스 간 통신, 외부 시스템과도 이용 가능, 클라이언트 - 서버 구조로 자원을 주고받음
- 세마포어 : 접근하는 프로세스를 제어해 공유 자원 관리
- 공유메모리 : 프로세스 간 공유 가능한 메모리 구성 여러 프로세스에서 접근하여 동기화 문제 발생 가능함
- 메시지 큐 : FIFO 형태의 큐 자료구조 사용하여 프로세스 간 메시지 주고받기
- 오버헤드 :
    - 좀비 프로세스 : 자식프로세스 종료 후 부모 프로세스가 자식 프로세스의 종료 상태 회수 못하여 남겨진 자식 프로세스
    - 고아 프로세스 : 부모 프로세스가 자식 프로세스보다 먼저 종료 된 자식 프로세스 ( → 자식 프로세스의 부모 PID 를 init 프로세스인 PID 1 로 변경해줌)
    - 프로세스 동기화
    - 레이스컨디션(경쟁상태: race condition) : 공유 자원에 동시에 접근해 경쟁하는 상태
    - 임계영역(critical section) : 공유 자원에 접근할 수 있고 접근 순서에 따라 결과가 달라지는 코드 영역
    - 프로세스 동기화(process synchronization) : 여러 프로세스가 공유 자원에 접근해도 데이터의 일관성 유지
    - 뮤텍스(mutex) : 락을 가진 프로세스만이 공유 자원에 접근할 수 있게 하는 것
    - 바쁜대기 : 프로세스가 공유 자원에 접근할 수 있는 권한을 얻을때까지 확인하는 과정
    - 세마포어 : 공유 자원에 접근할 수 있는 프로세스의 수를 정해 접근을 제어하는 방법
- 교착상태
    - 2개 이상의 프로세스가 각각 자원을 가지고 있으면서 서로의 자원을 요구하며 기다리는 상태를 교착상태라고 한다.
        - 상호배제
        - 점유와 대기
        - 비선점
        - 환형대기
- 스케줄링
    - 스케줄링 알고리즘 : CPU 스케줄러(단기스케줄러) 가 준비 큐에 있는 프로세스 중 어떤 프로세스를 실행시킬지 결정하는데 사용하는 알고리즘이다.
        - 비선점형 스케줄링 : 종료시까지 다른 프로세스가 실행 불가
            - FCFS(FIFO)
            - SJF(Shortest Job First) - 실행시간이 긴 프로스세가 밀리는 기아현상 발생 가능
        - 선점형 스케줄링 : 스케줄러가 실행 중인 프로세스 중단시키고 다른 프로세스 실행 가능
            - RR(Round Robin) 스케줄링
            - SRTF(Shortest remaining time first) 스케줄링
            - Multi level que 스케줄링 : 준비 큐를 목적에 따라 여러 개로 분리해 사용하는 알고리즘