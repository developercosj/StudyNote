# 중요한 사항 : 현재 카테고리를 기준으로 모든 하위 카테고리를 조회하는 것이 가능해야 한다.



1. 인접목록 (Adjacency List)

- parent_id 추가하여 바로 상위 계층과 연결
- 하위 나 바로 상위 데이터는 알기 쉬우나 계층이 늘어날 수록 Join 재귀함수등으로 찾아나가야 하는 과정이 어려움
- 대량 계층이라면 굉장히 더 어려워짐
- 삭제시 하위 내용들까지 모두 다 봐야하기 때문에 쉽지 않음
- 이동이나 삽입등은 어렵지 않음
- 특정 노드의 모든 깊이 자식 조회가 어려움
- 특정 단말의 모든 부모 조회도 어려움
- 모든 데이터를 꺼내어 트리구조로 재구성 필요


2. 경로 열거 (path enumeration)

- parent_id 대신 경로 열거할 수 있는 path 컬럼이 추가된다.
- where path Like '1/5/6/7/' 이런식으로 조회시 경로를 따라간다.
- 이동과 삽입은 부모가 가지고 있는 path 에 삽입할 아이디를 추가로 저장해 해결 할 수 있다.
- path는 그냥 문자열 타입의 컬럼이기 때문에 삭제시에도 Like 를 써서 바로 삭제해 버릴 수 있다.
- 이동 삽입 삭제 시 하위 카테고리들의 path를 모두 수정해야 하는 어려움 존재
- path 작성시 형식지정을 명확하게 강제해야 한다.
- 문자열 기반의 경로는 참조 정합성을 보장하지 않는다.
- 컬럼 path 크기에 제약을 받을 수 있다.


3. 중첩 집합

- 자식의 데이터를 가지고 있는 구조
- left, right 컬럼 추가됨 -> 이 값으로 부모 - 자식 카테고리를 탐
- left 와 right 는 깊이 우선 탐색을 하면서 할당한다.
    - 깊이 우선 탐색
        - 1. 현재 위치에서 left 값 할당
        - 2. 하위 노드가 있으면 계속 내려 가면서 left 에 값 할당
        - 3. 더 이상 내려갈 하위 노드가 없으면 상위 노드로 올라가면서 right 에 값을 할당한다.
        - 4. 형제 노드가 있으면 형제 노드로 이동한다.
        - 5. 반복

- 자식 조회는 좀 어려움
- 트리 구조가 변경될 때마다 왼쪽과 오른쪽 값을 다시 계산해주어야 하는 문제점 존재
- left 와 right 크기 비교만으로 하위 카테고리들을 조회하기 때문에 다른 관계 없는 카테고리에서 차가 제일 적은 값을 가질 수도 있다.
- 트리 조회 SQL




4. 클로저 테이블 (Closure table)

- 조상과 자손 관계 뿐만 아니라 트리의 모든 경로 조회한다.
- 노드 간 연관(조상-후손) 에 대한 정보를 추가적인 테이블에 저장한다.
- 트리의 모든 경로를 저장 하는 방식
- 테이블이 한개 더 필요 ( 클로저 테이블 )
- 자기 자신 참조부터 모든 부모/자식 관계를 넣어준다.
- ansestor, descendant, depth
- 자기 자신으로의 링크에 대한 정보 또한 저장하고 있음
- 조상이나 자손을 조회하는 쿼리가 직관적이다.
- 데이터는 데이터 대로 저장하는데 데이터 간의 관계(vertex)를 별도의 테이블에 저장하는 방식


- Closure pattern
    - hierarchy 구조