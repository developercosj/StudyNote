- 인터프리터 ( 컴파일 x )
- Java !== Javascipt
- ECMA Script 로 규격화


- 멀티패러다임 (함수, 객체 지향)
- 클라이언트 => 확장
- 서버 구축 가능
    - node.js
    - electron js 는 데스크탑 어플리케이션 생성 가능
    - react native 로 앱 생성 가능 (ios/안드로이드)
    - mongo db 도 가능

- 변수
    - var(let, const 가 완벽하게 대체가능), let, const
    - var 의 단점 : 자바스크립트 엔진 기본 객체가 window 인데
        # window 객체에 코어한 것들이 들어있음
        var 를 통해서 변수를 생성하면 window 안에 그 객체가 등록이 되는데 좋지 않은 방식이 된다.
        반복문등 코드 블록 안에서 선언이 되더라도 window 안에 등록이 되기 때문에 밖에서도 호출이 가능한 방식이 된다.
    - let, const
        - let
            변수의 값 재할당 가능
        - const
            - 변수의 값 재할당 불가
    - 블럭 단위
        - 블럭 안에서 선언된 변수가 있으면 변수는 블럭 안에서만 사용가능
        - 변수가 블럭 밖에서 선언이 되면 블럭 안에서도 사용이 가능해짐
- 데이터 타입
    - 종류 : String, Number, boolean, null, undefined, symbol
    - String
        - const name = "sujeong lee";
    - Number
        - const age = 35;
        - const weight = 86.3;
    - boolean
        - cost isMale = true;
    - null
        - const money = null;
        - 값이 선언이 됬지만 null 값
    - undefined
        - const girlFriend = undefined;
        - 값 선언부터가 안된 것

    - 타입을 확인하는 명령어
        - console.log(typeof age) # age 는 변수이름

    - 배열
        - push : 제일 마지막에 데이터가 넣어짐
        - pop : 마지막꺼 꺼내기
        - indexOf() : 파라미터 변수가 있는 인덱스 반환
        - Array.isArray() : 배열인지 아닌지 판단해줌
        - splice(인덱스 A, 인덱스 B) : A 인덱스부터 B 인덱스까지 자르기

    - ... : spread operator로서 배열의 값들만 가져오는것


    - Object
        - Object 안에 배열 사용 가능
        - Object 안에는 또다른 Object 사용 가능
        - 메서드 : Object 안에 선언된 함수
        - 접근 : Ocject명["이름"] , Object명.이름
            - Object 안의 Object 접근 : Object명.이름.이름
        - Object 를 Json 으로 변환
            - Json.stringify(오브젝트명);
            - Json.parse(Json 형태 객체) -> 읽을 수 있도록 한다.
    - forEach
        ex) animals.forEach(funtion (animal) {
            console.log(animal)
        })
    - map
        const mappedAnimal = animals.map(funtion (animal) {
            return animal.name
        })
        console.log(mappedAnimal)
    -  arrow funtion 위와 동일, 인덱스를 넘기지 않는 경우 인자가 1개이면 생략 가능
        const mappedAnimal = animals.map(animals) => {
            return animal.name
        })

        const mappedAnimal = animals.map(animals => animal.name)

    - filter 필터
       const filteredAnimal = animals.filter(animal => {
        return animal.size === 'big' && animal.weight > = 200
       })

      const filteredAnimal = animals.filter(animal => animal.size === 'big' && animal.weight > = 200)

    - reduce
        const reducedAnimal = animals.reduce((acc, cur) => {

            return acc + cur.weight

        }, 0)
        -> 0 을 초기값을 주는 것이 중요 (꼭은 아니나 나중에 오류가 나올 수 있음)
        console.log(filteredAnimal)


    - 비교
        - === : 값, 자료형 모두 같을때
        - == : 값이 같을때
        - !===
        - !=
    - 조건문
        - if , else if , else 로 표현한다.

    - 삼항 연산자
        조건 ? 참일경우 : 거짓일 경우 ;

    - switch (animal) {
        case "lion" :
            console.log("big");
            break;
        case "cat" :
            console.log("small");
            break;
        default:
            console.log("null");
            break;

    }


    funtion add(a,b) {
        return a + b;
    }


    - NaN
    - funtion add(a = 0, b = 0) [
        return a + b;
    }
        -> 작성을 하면 윈도우 객체에 등록이 되어 버림
        -> 초기값을 줄 수도 있음

    - 익명함수를 만들 수도 있음 (변수에 담음)
        const add = funtion(a,b) {return a + b}


    - arrow funtion
        - () => {}
        - 예시
            const sum = (a,b) => {
                return a + b
            }

        - Window 객체에 등록되지 않아서 안정적임
        - 추가 예시
            - 중괄호 생략 가능
              const sum = a => a + 5;

    - OOP (객체지향) 프로그래밍
        - funtion Song() {
            const title = "All I want is Charistmas";
            const singer = "Mariah Carrey"
        }
        console.log(song)
        - new 키워드를 사용해서 constructor funtion 만들기
        - 인스턴스 만들기

            - funtion Song(title, singer) {
                this.title = title;
                this.singer = singer;
                console.log(this)
                # Object 가 반환된다.
                this.getInfo = funtion () {
                    return "리턴리턴 ${this.title}"
                }
              }
            - const song1 = new Song();

    - proto
        : protoType 등록되어 있는것
        song.prototype.getDate = funtion() {

        }

    - class 로 작성
        - class Song {
            constructor(title, singer, year) {
                this.title = title;
                this.singer = singer;
                this.year = year;
            }
            getInfo() {
                return "${this.title} 입니다."
            }
        }
        const song1 = new Song("Christmas", "Mariah", "2020-12-16");
        console.log(song1.getInfo())

    - DOM 다루기
        - const output = document.getElementById("output")
          console.log(output)
          # {} 를 씌우면 object 형태로 보인다.
          console.log({output})
        - const wrapper = document.getElementsByClassName("wrapper")
          - 클래스는 하나가아닌 여러개를 가질 수 있기 때문에 HTMPCollection 으로 출력 된다.
        - const button = document.querySelector("#button")
        - const items = document.querySelectorAll(".item")
        - const target = document.querySelector(".target")
            target.style.color = "red";
            target.style.fontSize = "red";
            console.log({target})

        - const title = document.querySelector("h1")

        title.addEventListener("click", funtion() {
            title.style.color = "red"
        })
        userId.addEventListener("input", funtion(e) {
            console.log(e)
            console.log(this.value)
            target.innerText = this.value
        })

        button.addEventListener("click", () => {
            # arrow 에서 this 는 window 를 가리킨다.
            target.style.width = "50px"
             target.style.height = "50px"
             target.style.backgroundColor = userId.value;
             target.style.borderRadius = "50%"
        })


        - 특정 이벤트 발생했을때 처리
            .addEventListener("발생하는 이벤트", function(e) {

            })
        - 함수
            - function 함수명() {

            }
            - const 변수명 = function(){}
            - const 변수명 = () => {}

        - eventListener


