- 인터프리터 ( 컴파일 x )
- Java !== Javascipt
- ECMA Script 로 규격화


- 멀티패러다임 (함수, 객체 지향)
- 클라이언트 => 확장
- 서버 구축 가능
    - node.js
    - electron js 는 데스크탑 어플리케이션 생성 가능
    - react native 로 앱 생성 가능 (ios/안드로이드)
    - mongo db 도 가능

- 변수
    - var(let, const 가 완벽하게 대체가능), let, const
    - var 의 단점 : 자바스크립트 엔진 기본 객체가 window 인데
        # window 객체에 코어한 것들이 들어있음
        var 를 통해서 변수를 생성하면 window 안에 그 객체가 등록이 되는데 좋지 않은 방식이 된다.
        반복문등 코드 블록 안에서 선언이 되더라도 window 안에 등록이 되기 때문에 밖에서도 호출이 가능한 방식이 된다.
    - let, const
        - let
            변수의 값 재할당 가능
        - const
            - 변수의 값 재할당 불가
    - 블럭 단위
        - 블럭 안에서 선언된 변수가 있으면 변수는 블럭 안에서만 사용가능
        - 변수가 블럭 밖에서 선언이 되면 블럭 안에서도 사용이 가능해짐
- 데이터 타입
    - 종류 : String, Number, boolean, null, undefined, symbol
    - String
        - const name = "sujeong lee";
    - Number
        - const age = 35;
        - const weight = 86.3;
    - boolean
        - cost isMale = true;
    - null
        - const money = null;
        - 값이 선언이 됬지만 null 값
    - undefined
        - const girlFriend = undefined;
        - 값 선언부터가 안된 것

    - 타입을 확인하는 명령어
        - console.log(typeof age) # age 는 변수이름

    - 배열
        - push : 제일 마지막에 데이터가 넣어짐
        - pop : 마지막꺼 꺼내기
        - indexOf() : 파라미터 변수가 있는 인덱스 반환
        - Array.isArray() : 배열인지 아닌지 판단해줌
        - splice(인덱스 A, 인덱스 B) : A 인덱스부터 B 인덱스까지 자르기

    - ... : spread operator로서 배열의 값들만 가져오는것


    - Object
        - Object 안에 배열 사용 가능
        - Object 안에는 또다른 Object 사용 가능
        - 메서드 : Object 안에 선언된 함수
        - 접근 : Ocject명["이름"] , Object명.이름
            - Object 안의 Object 접근 : Object명.이름.이름
        - Object 를 Json 으로 변환
            - Json.stringify(오브젝트명);
            - Json.parse(Json 형태 객체) -> 읽을 수 있도록 한다.
    -



