1. Spring Boot 에서 HTTPSecurity 와 WebSecurity 의 차이점

- starter-security가 클래스 경로에 있을 때 기본 보안 구성이 포함된 SecurityAutoConfiguration 클래스가 포함되며 Spring Boot 애플리케이션이
모든 HTTP 엔드포인트를 자동으로 보호
    “org.springframework.boot:spring-boot-starter-security”

- @EnableWebSecurity(클래스를 전역에 사용)를 @Configuration 과 같이 class 에 설정
- extends WebSecurityConfigureAdapter (과거 버전이나 이해하는데 사용)

    @Configuration
    @EnableWebSecurity
    public class CustomWebSecurityConfiguration extends WebSecurityConfigurerAdapter {

        @Override
        public void configure(WebSecurity web) throws Exception {
            web.ignoring().antMatchers("/health", "/health/**");
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable()
                .authorizeRequests()
                .antMatchers("/health", "/health/**").permitAll()
                .anyRequest().authenticated();
        }



    }
- WebSecurity는 HttpSecurity보다 상위
- configure(WebSecurity web) : endpoint들은 Spring Security에 의해 무시된다. 즉 Spring Security Filter Chain을 우회하며
  보안컨텍스트가 설정되지 않는다.
- configure(HttpSecurity http) : endpoint 들은 antMatchers에서 사용되는 엔드포인트에 대한 인증을 무시. 요청은 Spring Security Filter Chain에서 액세스 가능
  따라서 HttpSecurity를 사용하고 allowedAll()을 시도하면 요청이 Spring 보안 필터 체인을 통해 전달되므로 비용이 많이 든다.
- 일반적인 취약점에 대한 방어가 필요한 엔드포인트가 필요한 경우 HttpSecurity http을 사용
- 인증 목적으로 특정 요청을 무시하려면 WebSecurity web을 사용
- WebSecurity의 ignoring() 메서드는 스프링 보안을 완전히 우회하고 HttpSecurity에서 고려하지 않게 된다. HttpSecurity allowedAll()은 구성된 끝점에 대한 익명 액세스를 허용
- WebSecurity에 enpoint가 있는 경우 HttpSecurity에서는 고려되지 않음
- css나 이미지 파일 등의 경우 인증이 되지 않은 상태에서도 보여져야 하는 경우 configure(WebSecurity web)의 ingnore()를 사용하여 예외처리 가능


2. config 파일 세팅
- 로드벨런서는 permitAll()로 설정하여 엑세스 허용시킴
  .antMatchers("/chk").permitAll()
- .loginPage("/view/login")
  로그인 페이지를 커스텀페이지로 변경
- .loginProcessingUrl("/")
  로그인 form 전송시 action
- .logout()
  .logoutRequestMatcher(new AntPathRequestMatcher("/"));
  로그아웃시 호출하는 url 변경
- .antMatchers("/manage").hasAuthority("ROLE_ADMIN")'
  유저가 ADMIN 롤을 가지고 있을때 접근 가능하다.
- @AuthenticationPrincipal User userInfo
  파라미터에 @AuthenticationPrincipal 를 사용해서 User의 Entity를 지정해주면 컨트롤러쪽에서 바로 유저 정보를 얻을 수 있다.
