- find 단축키
    https://dev.drawyourmind.com/posts/terminal-find-commad/
- 환경변수
    - 수정
        vim ~/.zshrc
        export PATH="[경로명]:$PATH"
    - 적용
        source ~/.zshrc


- 하위 폴터에서 모든 텍스트 찾기
    grep -r "찾으려는 단어"
- 현재 디렉토리(.) 내 ‘.txt’를 포함한 모든(*) 파일 검색
    $find . -name "*.txt"


- ls -altr
    - a : 숨겨진 파일 보기
    - t : 최종 갱신 시간 순으로 보기
    - F : 실행 파일 확인
    - l : 파일 정보 자세히 보기



- 위치 경로 확인
    which python3 (파이썬예)

- 파일에서 .은 숨겨진 파일 보는것



- 강제종료
    option + command + esc

- 파일 권한까지 확인
    ls -l

    ./SECRET_KEY

- homebrew 로 설치한 프로그램 위치 및 정보 파악하기
    - brew info {설치한 APP 이름}


- 터미널 창 분할
    # 선행 : brew install iterm2
    창 세로 분할: Command + D
    창 가로 분할: Command + Shift + D

- node 버전 변경하기 (다운받은 후)
    brew unlink node@16
    brew link --overwrite node@14


- 포트 KILL
    lsof -i :포트번호
    kill -9 PID
    (-9 는 강제임)

- 환경변수

환경변수는 PATH= 로 지정하고 $PATH 처럼 $를 붙이면 환경변수를 읽어온다.
PATH 를 저장할때 뒤에 #PATH를 붙이는 이유는 PATH를 초기화하지 않고 계속해서 +의 개념으로 저장하기 위해서
실행시킬때 앞에 환경변수를 지정해주면 그 실행시에만 임시적으로 환경변수를 사용하도록 설정하는 것이다.



- 리눅스 명령어


- 파일 내용 확인
    - cat :
    - more :
    - head : 앞에부터 -n 옵션까지 라인수 봄
    - tail : 파일의 끝 부분의 내용 출력함 tail -f 는 계속해서 갱신
    - file :



- 권한
    읽기(r), 쓰기(W), 실행권한(x)
    본인, 권한, 기타



- | : 표준 출력을 다른 프로그램의 입력으로 사용하고자 할 때 사용함



- < : 입력으로 사용
- > : 출력으로 ( 후에나오는 파일에 넣기등)


- .login, .logout
- ping : 서버와 통신 확인할것
- telnet :  (현재는 ssh 를 더 많이 사용)
- 최근에는 보안 접속을 위해서 ssh 를 사용
- FTP : 파일 주고받는데 사용

- 압축관련 파일 확장자의 종류
    - .tar : 묶어주는것 (용량을 줄이지 않음)
    - .gz or.z : 용량을 줄여주는 것
    - .tar.gz or  .tar.z


- 압축시 : 압축할떄 오버헤드 :
- tar -cvf(압축), tar - evf (복원)
- gzip files, gzip -d files



프로그램 -> CPU 자원 -> 메모리 -> 파일 -> 입출력 장치

PCB (process control block)

프로세스는 작업의 단위
수행, 대기(입출력으로 부터 대기, CPU 를 할당받은 뒤), 준비

- 파티션
- fork : 여러개의 새로운 프로세스를 생성하는 것
- parent process/child process
- Pid
- 메인 프로세스에 공유 할당 메모리 -> 자식 프로세스가 공유가능하다.
- task : process 를 만들지 않고 여러개 작업을 만드는거 (유닉스랑 리눅스는 muilti-tasking)
- foreground : 명령을 실행하고 종료될 때 까지 다른 명령어를 실행하지 않고 기다리는 것
- background : 하나의 명령어가 끝나지 않아도 다른 명령어를 실행시켜 복수개의 작업 동시에 실행
    - 스크립트 실행같은것
    - '&'를 붙여서 해당 병령어를 background 로 실행
- ps -all (내 유저가 실행한 프로세스가 나옴)
- uid : 유저 id
- ps -efa
    e: 현재 시스템 내에 실행 중인 모든 사용자 프로세스 정보 출력
    f: 프로세스에 대한 좀 더 자세한 정보 출력
- ps -aux
- ppid : 부모 pid



- 개발자 도구 열기 (크롬)
    - cmd + option + i

