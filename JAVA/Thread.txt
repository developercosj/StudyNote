1. 자바에서의 Thread
    - Process 와 1:다 관계
    - Lightweight process
    - 프로세스에서 만들어 사용하고 있는 메모리를 공유한다.
    - Thread 구현방법
        - Thread 클래스 상속
            - Thread 클래스는 Runnable 인터페이스 구현한 것
            - 자바는 다중 상속을 인정하지 않기 때문에 스레드 상속시 다른 클래스를 상속받았다면 사용 불가하며 이때는 Runnable 인터페이스 구현 필요
            - 예시
                public class ThreadExtends extends Thread {
                	public void run() {
                        // 실행 코드
                	}
                }
            - 실행 : start() 메서드 호출
        - Runnable 인터페이스 구현
            - 원하는 기능 추가 가능
            - 해당 클래스를 수행 시 별도의 스레드 객체 생성 필요
            - 예시
                public class RunnableImpl implements Runnable {
                	public void run() {
                        // 실행코드
                	}
                }
            - 실행 : Thread 클래스의 Runnable 인터페이스를 매개변수로 받는 생성자를 사용해서 Thread 클래스를 만든 후 start() 메서드 호출
                public static void main(String []args) {
                	RunnableImpl ri = new RunnableImpl();
                	ThreadExtends te = new ThreadExtends();
                	new Thread(ri).start();
                	te.start();
                }
            - 메서드
                - sleep()
                    - 명시된 시간만큼 해당 스레드 대기함
                    - 사용법
                        - sleep(long millis)
                        - sleep(long millis, int nanos)
                - wait()
                    - 모든 클래스의 부모격인 Object 클래스에 선언되어 있기에 모든 클래스가 사용가능
                    - 사용법
                        - 시간 지정하지 않으면(매개변수) notify(), notifyAll() 메서드가 호출될 때까지 기다린다.
                - join()
                    - 명시된 시간만큼 해당 스레드가 죽기를 기다린다.
                    - 매개변수가 없으면 계속 대기
                *예외처리해주어야함

                #위의 메서드를 끝내는 메서드
                - interrupt()
                    - sleep(), wait(), join() 을 모두 멈출 수 있는 유일한 메서드
                    - 중지된 메서드에는 InterruptedException 발생
                    - interrupted() : 스레드 상태 변경 (수행 확인)
                    - isInterrupted() : 스레드의 상태만을 리턴  (수행 확인)
                    - 대기 상태일 때에만 해당 스레드를 중단시킨다.
                - notify(), notifyAll()
                    - wait() 메서드 멈추는 메서드(대기상태로 바뀐 스레드 깨우기)
                - isAlive()
                    - 해당 스레드가 살아있는지 확인 (true/false)
    - synchronized
        - 메서드와 블록으로 사용할 수 있다.
            public synchronized void method() {

            }
            private Object obj = new Object();
            public void sampleBlock() {
            	synchronized(obj)
            }
            - 하나의 객체를 여러 스레드에서 동시에 사용할 경우 사용
            - static으로 선언한 객체를 여러 스레드에서 동시에 사용할 경우 사용
            - 자바에서 동기화하기
                - Lock : 실핼 중인 스레드를 정지시켰다가 실행 상호 참조로 인해 발생하는 데드락 방지
                - Executors : 스레드를 더 효율적으로 관리할 수 있는 클레스들을 제공, 스레드 풀도 제공
                - Concurrent 콜렉션
                - Atomic 변수 : 식별자를 메서드에 지정할 필요 없이 사용