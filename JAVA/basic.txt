1. StringBuilder

- StringBuilder 를 사용하는 이유

**자바는 String 객체 변경이 불가능하기 때문에 문자열 결합시 "A" + "B" 시 "C" 로 되고 이전 문자열은 가비지 컬렉터로 들어간다. 응답시간도 길다.
문자열을 많이 결합하게 되면 메모리가 많이 쓰게 된다.
String 객체끼리 더하는 방법은 메모리 할당과 해제가 되며 연산이 많아지면 성능이 저하된다.
따라서 String은 변경 불가능한 문자열을 생성하지만 StringBuilder는 변경 가능한 문자열을 만든다.

- StringBuilder 사용 방법
StringBuilder stringBuilder = new StringBuilder();
stringBuilder.append("문자열 예시A").append("문자열 예시B");
String str = stringBuilder.toString();

- StringBuffer 클래스와 StringBuilder 클래스 차이
StringBuffer는 ThreadSafe : 여러개의 스레드에서 하나의 StringBuffer 객체를 처리해도 괜찮다.
                            Static 선언한 문자열 변경시 또는 Singleton 선언된 클래스에 선언된 문자열일 경우 사용
하지만 StringBuilder는 단일 스레드에서만 안전성이 보장된다. (여러개의 스레드에서 하나의 StringBuilder 객체 처리 에러발생)

- 생성자의 4가지 종류
StringBuffer() : 기본 객체 생성 (값 x) 16 char
StringBuffer(CharSequence seq) : CharSequence는 인터페이스이며 CharSequence를 구현한 클래스는 CharBuffer, String, StringBuffer, StringBuilder 가 있다.
                                 StringBuffer나 StringBuilder 로 생성한 객체를 전달할 때 사용한다.
                                 예시 JAVA/StringBufferTest.java 파일 참고
StringBuffer(int capacity) : capacity 에 지정한 만큼의 용량을 갖는 StringBuffer 생성
StringBuffer(String str) : str의 값을 갖는 StringBuffer를 생성한다.

- 메서드 종류 : append(), insert()
- StringIndexOutOfBoundsException : insert() 메서드를 사용할 때 index 값을 지정해주는데 만약 이 값까지 할당이 안되어 있으면 발생하니 주의 필요
- 배치로 작성시 반복문 안에서 String 결합이 많이 발생할 수 있기 때문에 StringBuffer, StringBuilder 사용 고려하기
- 스트링객체 생성하여 새로만들어진 String 객체가 아닌 결합한 String 객체들은 GC 에 의해 사라지는 과정이 있으나 StringBuffer, StringBuilder는 객체를 한번만 만들기 때문에 메모리 사용량이 많은 차이가 나게 된다.
- JDK 5.0 이상부터는 컴파일러에서 자동으로 StringBuilder 로 변환시켜 줌


2. Serializable

- Serializable 을 구현(implements)하는 이유
객체를 직력화 할 수 있다. 서버 사이의 데이터 전송이 가능해진다. 원격지 서버에 데이터를 전송하거나
파일로 객체를 저장할 경우 이 인터페이스를 구현해야 한다.
- 구현해야 할 메소드는 없음
- 직렬화 : 자바 시스템 내부에서 사용되는 객체 또는 데이터를 외부의 자바 시스템에서 사용할 수 있도록 바이트 형태로 데이터 변환 AND 변환된 데이터를
 다시 객체로 변환하는 기술
 (JVM 의 메모리에 상주되 있는 객체 데이터를 -> 바이트 형태로 변환하는 기술 및 직렬화된 바이트 형태의 데이터를 객체로 변환 기술)
- serialVersionUID : 서버가 해당 객체가 같은지 다른지 구분 가능
- 부모클래스가 직렬화 구현하지 않았다면 자식 클래스 직력화 시 부모클래스 변수는 직렬화 대상 제외



3. 제네릭
- 타입을 일반화하는 것을 의미
- 타입의 일반화 : 클래스 내부에서 타입을 정하는 것이 아닌 외부에서 정하는것으로 사용자가 제네릭 클래스의 인스턴스를 생성할 때, 또는 제네릭 메소드 호출시 타입을 정한다는 것
- 장점 : 재사용성이 높음(하나의 타입으로 사용하지 않고 여러개 가능), 컴파일 시 타입 에러 발견 가능, 형변환 생략하여 코드 타입 캐스팅 불필요
- 사용예시
    class Country<T> {
        public T city;
        Country(T city){ this.city = city;}
    }

    Country<Jeju> jeju = new Country<Jeju>(new Jeju());
    Country<Busan> busan = new Country<Busan>(new Busan());
- 특징
    1) 불공변관계
    class A extends B {}

    // XXX 사용할 수 없음
    Country<B> a = new Country<A>(new A()); 는 작동 x
    A 가 B를 상속받았다고 할지라도 제네릭에서는 불공변이기 때문에 위에 처럼 사용이 불가능하다.
        참고 : 배열은 공변관계에 있음
        A, B -> A[], B[] 하위관계로 사용 가능

    2) 제네릭 타입은 배열 생성이 불가능하다.
    class Country<T> {
        T[] arr; // 선언 가능
        T[] arr = new T[3] // 생성 불가능
    }
    new 연산자는 컴파일 시점에 메모리 확보 -> 타입 변수가 무엇인지 알아야함 컴파일 시점에서 타입 T가 무엇인지 알 수 없어 제네릭으로 배열 생성 불가
    -> Object 배열을 만든 후 T[] 형변환으로 처리 가능

    3) static 변수와 메소드 선언이 불가능(제네릭 메소드는 가능)
    제네릭 타입은 인스턴스가 생성되어야 정해짐
    static 멤버는 인스턴스 소속 멤버가 아니고 클래스 멤버기 때문에 인스턴스 생성 전 메모리에 올라감 -> 타입을 특정할 수 없는 static 변수는 에러가 발생하기에 사용불가

    4) 제네릭 메소드
    3번에서 본것처럼 static 메소드는 선언이 불가하지만 제네릭 메소드는 선언 가능
    클래스, 인터페이스, 메소드에서 제네릭 적용 가능하다.
    제네릭 메소드의 타입은 메소드 호출 시 결정된다.

    public <T> T genericMethod(T param) {}
    public 뒤에 <T> 표시가 제네릭 메소드인 것을 알려줌

    // 아래는 동일 : 뒤 파라미터로 타입 추론이 가능하기 때문에 <String> todfir rksmd
    <String>genericMethod("param");
    genericMethod("param");

    5) 일반 클래스 내부, 제네릭 클래스 내부에 제네릭 메소드 사용 가능하다.
    class Country<T> {
        public T getCountry(T material) {} // 메소드에 제네릭표시가 없으니까 T 는 클래스의 제네릭 타입 T
        public <T> T getTransport(T card) {} // <T> 라는 제네릭메소드 표시가 있기 때문에 클래스의 제네릭 타입 T 와 다른것
        public <P> P getTransport(P card) {} // 이러랑 같다고 할 수 있음
    }

    클래스 제네릭 타입 T는 전역변수같이 사용하며 제네릭 메소드의 T 는 지역변수같다고 비교 가능 (static 사용 가능)
    프로그램 실행 시 static 사용 비교
    예시)
    public class Country<T> {
        public void method1(T param) {} // T 는 클래스 제네릭 변수 T
        public static void methodError1(T param) {} // T는 타입이 지정되기 전에 static 메모리로 올릴 때 오류 발생
        public static <T> void method2(T param) {} // <T> 표시가 제네릭 메소드라고 알려주며 지역변수같은 T 따라서 static 사용 가능
        public static <S> T methodError2(S param) {} // 리턴타입인 T 는 클래스 제네릭 변수 T 이기 때문에 static 사용 불가
    }

    6) ? (와일드카드) : 모든 타입
    예시)
        public void methodError(List<Object> list) {}
        public void method(List<?> list) {}

        List<Integer> list1 = ArrayList.asList(1,2,3);
        List<String> list2 = ArrayList.asList("a","b","c");
        method(list1);  // 가능
        method(list2);  // 가능
        methodError(list1); // xxx 불가능 -> 제네릭 타입 변수는 불공변의 특성때문에 이렇게 사용 불가

    7) 와일드 카드 ? 에 제약 주어서 사용
        <? extends T> : T와 T의 하위 타입 사용 가능
        <? super T> : T 와 T의 상위 타입만 사용 가능



4. 람다 표현식

- 함수형 프로그래밍 구성 위한 함수식
- 자바에서 람다 표현식은 이름이 없는 함수라는 뜻의 익명함수(anonymous function) 이라고 부르기도 한다.
- 메소드를 사용하기 위해 클래스를 정의할 필요 없이 메소드 이름과 반환값 등을 생략하고 사용가능
- 예시)
    ind add(int x, int y) { return x + y; }
    -> 람다표현식
    (int x, int y) -> { return x + y; }
    ->
    (x, y) -> { return x + y; }
    ->
    (x, y) -> x + y;
    // 타입 생략 시 컴파일러가 생략된 타입 추론하나 타입을 명시해줘 명확히 할 수도 있다.
    (int x, int y) -> x + y;

- 인터페이스를 익명 클래스로 구현한 익명 구현 객체를 짧게 표현한 것
- 예시) 일회용 사용 함수 -> 람다

    interface Add {
        int add(int x, int y);
    }

    //아래는 main 메서드

    // 일회용 사용 함수
    Add a = new Add() {
        // 1회용 함수로 사용가능하다.
        public int add(int x, int y) {
            return x + y;
        }
    };

    // 람다로 표현
    Add lamda = (x, y) -> {return x + y;}; // 람다식에 꼭 세미콜론 븥이기
    int result = lamda.add(1,2);
    int result = a.add(1,2);

- only 인터페이스로 선언한 익명 구현 객체만 람다식으로 표현이 가능하고 이러한 인터페이스를 함수형 인터페이스라고 한다.
- 함수형 인터페이스 : 딱 하나의 추상 메소드가 선언된 인터페이스 ( java8 이상에서는 추상메서드가 한개기만 하면 여러 상수, 메서드 등이 있어도 함수형 인터페이스이다. )
- @FunctionalInterface : 두개 이상의 추상메소드가 선언되지 않도록 방지 (어길 시 컴파일 오류발생)

*추상 클래스 : 추상메소드를 가지고 있으면 반드시 추상 클래스로 선언 필요 abstract 사용
            추상 메소드를 가진 추상 클래스는 인스턴스를 생성할 수 없다. (Unresolved compilation problem)
            먼저 상속을 통해 자식클래스를 만들고 자식클래스에서 추상메소드를 오버라이딩한 뒤에 인스턴스를 생성할 수 있다.
            상속한 자식클래스가 abstract를 붙여 추상 클래스 선언을 해야 하나 만약 추상 메서드를 구현했다면 class 앞에 abstract 붙이지 않아도 됨(인스턴스 생성 가능
            상속받는 자식클래스가 반드시 오버라이딩 하도록 강제함
            다형성
*추상 메소드 : 선언은 되어 있으나 코드가 구현되어 있지 않은 메소드
            abstract 키워드를 선언하는 선언부만 존재하며 구현부는 작성하지 않음
            구현부는 자식클래스에서 오버라이딩하여 사용한다.

5. Enum
- 열거형(서로 연관된 상수들의 집합)
- 상수값의 타입안정성 보장
- 이미 선언된 Enum 상수 외의 객체는 사용 불가
- 정수 열거패턴 (static final)은 타입안전 미보장 단점과 정수 열거 패턴의 namespace 를 지원하지 않아 언더바를 사용하여
이름 충돌 방지 등을 해주어야 하는 단점을 보완
정수 열거 패턴(int enum pattern)을 사용하면 상수 값이 변화하면 다시 컴파일해야 상수값이 변경 적용

- Enum 생성자는 default가 private 이라 접근이 불가능함 (외부에서 객체를 생성되지 못하게 함)
    CITY city = new City("seoul"); 불가능
- CITY.values() 로 Enum 의 모든 원소를 배열에 담아 순서대로 반환한다.
- 예시)
    public enum StatusEnum {

        OK(200, "SUCCESS"),
        Bad_Request(400, "BAD_REQUEST"),
        NOT_FOUND(404, "NOT_FOUND"),
        INTERNAL_SERER_ERROR(500, "INTERNAL_SERVER_ERROR");

        int statusCode;
        String code;

        StatusEnum(int statusCode, String code) {
            this.statusCode = statusCode;
            this.code = code;
        }
    }
- enum 객체로 값 가져오거나 valueOf() 메소드 사용해서 가져온다.
    StatusEnum se1 = StatusEnum.OK;
    StatusEnum se2 = StatusEnum.valueOf("OK");

6. Static
- Static 선언 변수는 클래스 변수
- Static 초기화 블록
    1) 형태 :
    static {
        ...
    }
    2) static 블록은 클래스 최초 로딩 시 수행되며 생성자와 상관없이 실행된다. 여러번 사용할 수 있으나 마지막 저장된 값이 된다.
       static 블록은 순차적으로 읽혀진다.
- GC의 대상이 아님
- 사용빈도가 높으며 변하지 않는 값은 final static 으로 선언하여 변경에 대비
- 한번만 올라간 뒤에 변하지 않는 템플릿등을 읽어 오는 부분에서 걸리는 시간이 길 때 static 으로 만들어 놓으면 서버의 CPU에 부하를 줄일 수 있다.
    ex) Velocity 사용시
- 설정 파일 정보도 static 관리 시 성능 향상 가능
- 변경이 되는 객체를 static 으로 선언시 여러 스레드에서 접근과 값 대입이 여러번 이루어지면 문제가 발생한다.
- Collection 객체를 static 으로 발생시 GC 대상이 되지 않아서 데이터가 객체에 계속해서 쌓이다가 메모리를 초과시 OutOfMemoryError 가 발생 할 수 있다.
*Memory leak : 가용 메모리가 없을때 발생

7. reflection 클래스
       - JVM에 로딩되어 있는 클래스, 메서드 정보를 읽어올 수 있음
       - Class 클래스
           - 클래스에 대한 정보를 얻을 때 사용
           - 생성자 없음
           - 사용법(패키지정보, 클래스 이름조회)
               - String currentClassName = this.getClass().getName();
           - 메서드 정보얻기
               - getMethods(), getDeclaredMethod()
       - Object 클래스에 있는 getClass() 로 클래스 정보를 알 수 있다.
       - Field 클래스
           - 클래스에 있는 변수들의 정보 제공
           - 생성자 존재 x
           - class 클래스의 getField() 메서드나 gerDeclaredFields() 메서드 사용 해야함





5. Hibernate 데이터 매핑 프레임워크




