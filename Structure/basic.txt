
1. 신뢰성, 확장 가능성, 유지보수성

- 애플리케이션의 데이터 중심적인 특성으로 애플리케이션의 CPU 성능보다 데이터의 양, 복잡도, 변화 속도등이 더 중요한 문제가 될 수 있다.
- 데이터베이스, 캐시(읽기 속도 향상), 검색 색인(사용자가 키워드등으로 검색가능하도록 필터링 제공)
    
    스트림 처리(비동기 처리를 위해 다른 프로세스로 메시지 보내기), 일괄처리(주기적으로 대량의 누적된 데이터를 분석)
    
- 데이터 시스템 : 데이터베이스, 큐, 캐시
    - 메시지 큐
        - datastore 인 레디스(Redis)
        - 지속성 보장하는 메시지큐인 아파치 카프카(Apache Kafka)
- 소프트웨어 시스템의 중요한 세가지 요소
    - 신뢰성 : 하드웨어, 소프트웨어 결함, 인지오류의 문제시 시스템이 지속적으로 올바르게 동작(원하는 성능수준으로 정확한 기능 수행)
        - 결함을 예측하고 대처할 수 있는 시스템인 탄력성을 갖춘 시스템이 되어야 한다
        - 장애란 : 사용자에게 필요한 서비스를 제공하지 못하고 시스템 전체가 멈춘 경우
    - 확장성 : 시스템의 데이터의 양, 트래픽의 양, 복잡도 증가 → 처리할 수 이는 적절한 방법 존재
    - 유지보수성 : 다양한 사람들의 작업시 모든 사용자가 시스템 상에서 생산적으로 작업해야 한다.

2. 객체지향 개발 5대 원리
- SOLID
    - S(SRP : Single Response Principle)
        - 작성된 클래스는 하나의 기능만을 가지며 클래스가 제공하는 모든 서비스는 그 하나의 책임을 수행하는 데 집중되어 있어야 한다는 원칙
    - O(OCP : Open Close Principle)
        - 소프트웨어의 구성요소는 확장에 열려있고 변경에 닫혀있어야 한다.
        - 변경될 것과 변하지 않을 것 엄격히 구분
        - 위 두모듈이 만나는 지점에 인터페이스를 정의하고 인터페이스를 구현하여 코드 작성하여 인터페이스에 의존하도록 코드 작성
        - 설계자는 확장, 변경, 모듈 분리 등에서 크기 조절에 염두해야 함
    - L(LSP : Liskov Substitution Principle)
        - 서브 타입은 언제나 기반 타입으로 교체 가능
        - 서브 타입은 기반타입의 기본 규약을 지켜야 한다.
        - 상속은 extends 상속이든 인터페이스 implements 이든 다형성을 통한 확장성 획득 목표
        - 선언은 기반클래스, 생성은 구체 클래스
        - 예시
            함수생성시 파라미터에 기반 타입을 넣어줘 사용범위를 높이는 것
    - I(ISP : Interface Segregation Principle ) 인터페이스 분리의 법칙
        - 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다는 원리
        - 인터페이스의 단일 책임을 강조
    - D(DIP : Dependency Inversion Principle)
        - 실제 사용 관계는 바뀌지 않으며, 추상을 매개로 메시지를 주고 받음으로써 관계를 최대한 느슨하게 만드는 원칙
        - IOC, 훅매서드, 확장성

3. DIP 를 적용한 통신 프로그래밍 모델 정리

    1. 일반적인 소켓 프로그램(클라이언트 -> 서버 에게 Send()) (서버 -> 클라이언트에게 recv())
    2. 멀티 스레드 프로그래밍시 send() 한 뒤 recv() 함수를 응답받기까지 대기하는 동안 호출한 스레드가 다른 작업이 불가하여 스레드 자원이 낭비
    3. Polling 모델 사용하여 위의 사항을 보완해보자
    4. 클라이언트 -> 스레드 send() 하며 recv()는 따로 전담하는 스레드에게 맡긴다.
    5. 서버로부터 응답 확인하고 싶은 시점에 서버의 메시지를 가져올 수 있기 때문에 다른 일처리가 가능(클라이언트 스레드의 스케줄에 의한 통제)
    6. 서버의 예상 응답시간의 지연에 따른 클라이언트 스레드의 서버 응답 확인 요청이 많아질때 오버헤드가 발생
    7. DIP 를 적용 방법 고안
    8. 클라이언트 스레드가 메시지 send()한 후 recv()를 직접 하지 않고 서버 응답 처리하는 훅 메서드를 등록 (*커멘트 패턴)
    9. recv() 담당 스레드는 서버응답을 받으면 관련된 훅 메소드를 실행
    -> 통제권이 클라이언트 스레드에서 커멘드 오브젝트 (8번) 로 역전 IOC


*소켓
    - 프로토콜(통신 규약), ip 주소, 포트(통신 프로세스 식별값) 넘버로 정의
    - 떨어져있는 두 호스트를 연결해주는 도구로 인터페이스의 역할을 하며 데이터를 주고 받을 수 있는 구조체로 소켓을 통해 데이터 통로가 만들어짐
    - 클라이언트 소켓, 서버 소켓으로 구분
    - HTTP 통신과 Socket 통신 구분
        - HTTP 통신
            - Client 의 요청이 있을 때만 서버가 응답
            - 해당 정보 전송 후 바로 연결 종료
        - Socket 통신
            - Server 와 Client가 특정 Port를 통해 실시간으로 양방향 통신을 하는 방식 (계속 연결 유지)
            - 실시간으로 데이터를 주고받는 상황에 사용
            - 동영상 Streaming, 온라인 게임, 채팅등