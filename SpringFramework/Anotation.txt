클라이언트 -> 서버 (Request 요청)
서버 -> 클라이언트 (Response 응답)
비동기 통신을 위해 요청 메시지를 Body 에 담아서 전달
@RequestBody 어노테이션과 @ResponseBody 어노테이션이 각각 HTTp 요청 바디를 -> 자바 객체로 변환 -> HTTP 응답 바디로 변환


1. @RequestBody : 요청본문
- xml, json 기반의 메시지를 사용하는 요청의 경우 사용
- http 요청의 바디내용을 통째로 자바객체로 변환해서 전달
    예시) @RequestMapping(value= "")
    public String ajaxRequest(@RequestBody String param){}

2. @ResponseBody : 응답본문
- 자바 객체를 http 요청의 바디내용으로 매핑하여 클라이언트로 전송
예시 ) @ResponseBody
    @RequestMapping(value= "/RequestTest")
    public String ajaxRequest() {}
    }

3. @RestController
@Controller 와는 다르게 @RestController는 리턴값에 자동으로 @ResponseBody가 붙게됨
별도 어노테이션 없이 HTTP 응답데이터에 자바 객체가 매핑되어 전달된다.
즉 @Controller + @ResponseBody 어노테이션의 역할

4. @RequestParam vs @RequestBody
@RequestParam 으로 데이터를 받을때는 데이터를 저장하는 이름으로 메서드의 변수명을 설정해야 한다.
url 상에서 데이터를 찾는다.
객체 자동 생성 불가능
    public String person(@RequestBody Person person)
form 태그 사용하여 url 상에서 데이터 전달시 이용
*Json 형식 데이터 전달시 데이터는 Body에 포함하여 전달하기 때문에 @RequestParam 으로는 받을 수 없다.

@RequestBody 로 데이터를 받을 때는 String 형태로 받아서 메서드의 변수명이 상관 없음
객체 자동 생성가능
    public String person(@RequestBody Person person)


5. @Id
- 기본키(pk)를 지정
- 기본타입, 기본 래퍼 유형, String, java.util.Date, java.sql.Date, java.math.BigDecimal, java.math.BigInteger이 가능
- persist() 메서드 호출 전에 애플리케이션에서 직접 값 할당 없을 시 에러 발생하기에 직접 할당 필요
- 실제 오류 예시
    IdentifierGenerationException: ids for this class must be manually assigned before calling save()

6. @GeneratedValue
- 예시 : @GeneratedValue(strategy = GenerationType.AUTO)
JPA 구현체가 자동으로 생성 전략 결정
UUID 타입이라도 자동으로 생성 가능
- 기본키 자동 생성시 @Id와 둘다 사용되어야함
- 종류
    @GeneratedValue(strategy = GenerationType.IDENTITY)
        기본키 생성을 데이터베이스에게 위임(DB설정으로 인해 AUTO_INCREMENT로 키 생성)
        *전체 프로세스에 적용 방법 : hibernate: use-new-id-generator-mappings: false (application.yml)

    @GeneratedValue(strategy = GenerationType.SEQUENCE)
        테이블 시퀀스 전략은 모든 엔티티에 대한 id값을 시퀀스 테이블 하나에서 통합적 관리 전략
        모든 엔티티의 id 값이 하나의 엔티티처럼 증가됨
    @GeneratedValue(strategy = GenerationType.ATUO)
        선택한 DB에따라 dialect 에 따른 방식을 자동으로 선택
    @GeneratedValue(strategy = GenerationType.Table)
        키 생성 테이블 사용


7. @CreationTimestamp
- insert 쿼리가 발생 시 현재 시간 값 적용

8. @UpdateTimestamp
- update 쿼리 발생 시 현재 시간 값 적용 시켜준다.


9. @Transactional 의 이해
- 선언적 트랜잭션(파일 or 어노테이션 방식으로 정의) 사용하여 트랜잭션 처리
- 방법
    - 클래스에 선언 : 해당 클래스에 속하는 메서드에 공통 적용
    - 메서드에 선언 : 해당 메서드만 적용
- 내부 프로세스
    - 1) @Transactional이 선언되면 해당 클래스에 트랜잭션이 적용된 프록시 객체 생성
    - 2) 프록시 객체는 @Transactional 이 포함된 메서드가 호출될 경우, 트랜잭션을 시작하고 Commit or Rollback 을 수행
    - 3) CheckedException 발생하거나 예외가 없을 때는 Commit
    - 4) UncheckedException이 발생하면 Rollback
- 우선순위
    클래스메서드 > 클래스 > 인터페이스 메서드 > 인터페이스
    *공통적인 트랜잭션적용은 클래스에, 특정 트랜잭션 적용규칙은 메서드에 선언가능
- 자바 어노테이션은 인터페이스 상속으로 같이 상속되지 않기 때문에 인터페이스 내부에 설정한 @Transactional 은 인터페이스 기반 프록시에서만 유효한 트랜잭션 설정이 된다.
- 모드
    - 1) Proxy Mode(Default)
        반드시 public 메서드에 적용
        - 다른 접근 제한자에서는 선언가능하나 정상적인 동작이 되지 않는다. (AspectJ Mode를 고려)
    - 2) AspectJ Mode
- JPA 구현체 확인 시 모든 메서드에 이미 @Transactional이 선언되어 있어서 직접 선언이 필요가 없다.
- 테스트케이스에 적용시
    @Transactional을 테스트 케이스에 적용 시 테스트 시작 전에 트랜잭션 시작후 테스트가 완료한 후에는 항상 롤백을 하기 때문에 DB에 데이터가 남지 않기 때문에 다음 테스트에 영향을 주지 않는다.