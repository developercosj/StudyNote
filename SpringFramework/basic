1. HttpEntity
- headers 와 body 를 포함하는 클래스 Http request나 response의 entity를 가리킨다.
- HttpEntity를 상속받아 구현한 클래스가 RequestEntity, ResponseEntity 클래스이다.
- RestTemplate과 사용하거나 Spring MVC 에서 @Controller의 메서드 리턴 값에서 사용한다.
- ex)
    @GetMapping("/handle")
      public HttpEntity<String> handle() {
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.set("MyResponseHeader", "MyValue");
        return new HttpEntity<>("Hello World", responseHeaders);
      }
2. ResponseEntity
- HTTP 상태 코드 전송 시 데이터와 함께 전송하여 세밀한 제어 가능
- 구조(HttpEntity 상속, 응답 데이터 포함)
    HttpStatus, HttpHeaders, HttpBody 포함
    http header : 요청, 응답에 대한 요구사항
    http body : 내용
    response header : 웹서버가 웹브라우저에 응답하는 메시지
    response body : 데이터 값
- 상태코드는 필수적으로 리턴 필요
- return 값은 생성자보다는 빌더 패턴 사용하기
    1) 생성자 패턴
        return new ResponseEntity(body, headers, HttpStatus.valueOf(200));
    2) 빌더 패턴 (메소드 체이닝으로 연결)
        return ResponseEntity.ok()
            .headers(headers)
            .body(body)
- 반환타입이 명확하지 않아도 사용 가능 (Object, ?(와일드카드))
    public ResponseEntity<Object> 메서드_이름() {

    }
    public ResponseEntity<?> 메서드_이름() {

    }
    예시) 와일드카드
        @GetMapping("/users")
        public ResponseEntity<?> getUsers() {
            List<?> users = userService.getUsers();
            return ResponseEntity.ok(users);
        }

    *API 설계 측면에서는 타입 파라미터를 이용하는 것보다 명시적으로 사용자 객체를 지정하는 것이 더 좋다. (직관적)


3. Controller 메서드의 리턴 타입 정리

- String : jsp 사용 시 뷰로 반환할 jsp 파일의 이름
- void : 호출하는 URL 과 동일한 이름의 jsp
- VO, DTO, Map등의 객체 : json 타입의 데이터를 생성하여 반환
- ResponseEntity : Http 헤더 정보, 내용을 가공하여 반환
- Model, ModelAndView : Model로 데이터를 반환하며 View를 통해 어떤 화면으로 반환할 것인지 설정
- HttpHeaders : 응답에 내용없이 HTTP 헤더 메시지만 전달