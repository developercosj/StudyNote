1. HttpEntity
- headers 와 body 를 포함하는 클래스 Http request나 response의 entity를 가리킨다.
- HttpEntity를 상속받아 구현한 클래스가 RequestEntity, ResponseEntity 클래스이다.
- RestTemplate과 사용하거나 Spring MVC 에서 @Controller의 메서드 리턴 값에서 사용한다.
- ex)
    @GetMapping("/handle")
      public HttpEntity<String> handle() {
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.set("MyResponseHeader", "MyValue");
        return new HttpEntity<>("Hello World", responseHeaders);
      }
2. ResponseEntity
- HTTP 상태 코드 전송 시 데이터와 함께 전송하여 세밀한 제어 가능
- 구조(HttpEntity 상속, 응답 데이터 포함)
    HttpStatus, HttpHeaders, HttpBody 포함
    http header : 요청, 응답에 대한 요구사항
    http body : 내용
    response header : 웹서버가 웹브라우저에 응답하는 메시지
    response body : 데이터 값
- 상태코드는 필수적으로 리턴 필요
- return 값은 생성자보다는 빌더 패턴 사용하기
    1) 생성자 패턴
        return new ResponseEntity(body, headers, HttpStatus.valueOf(200));
    2) 빌더 패턴 (메소드 체이닝으로 연결)
        return ResponseEntity.ok()
            .headers(headers)
            .body(body)
- 반환타입이 명확하지 않아도 사용 가능 (Object, ?(와일드카드))
    public ResponseEntity<Object> 메서드_이름() {

    }
    public ResponseEntity<?> 메서드_이름() {

    }
    예시) 와일드카드
        @GetMapping("/users")
        public ResponseEntity<?> getUsers() {
            List<?> users = userService.getUsers();
            return ResponseEntity.ok(users);
        }

    *API 설계 측면에서는 타입 파라미터를 이용하는 것보다 명시적으로 사용자 객체를 지정하는 것이 더 좋다. (직관적)


3. Controller 메서드의 리턴 타입 정리

    - String : jsp 사용 시 뷰로 반환할 jsp 파일의 이름
    - void : 호출하는 URL 과 동일한 이름의 jsp
    - VO, DTO, Map등의 객체 : json 타입의 데이터를 생성하여 반환
    - ResponseEntity : Http 헤더 정보, 내용을 가공하여 반환
    - Model, ModelAndView : Model로 데이터를 반환하며 View를 통해 어떤 화면으로 반환할 것인지 설정
    - HttpHeaders : 응답에 내용없이 HTTP 헤더 메시지만 전달

4. 동시성 문제

    - 동시성 문제는 지역변수에서 발생하지 않는다. 지역변수는 쓰레드마다 각각 다른 메모리 영역을 할당 받기 때문이다.
    - 동시성 문제가 발생하는 곳은 같은 인스턴스필드(싱글톤등)나 static 같은 공용 필드에 접근할때 발생
    - 조회하는 것은 문제가 없으나 값을 변경하는 로직이 있을때 문제가 발생한다.
    - 해결방법
        - ThreadLocal : 해당 쓰레드만 접근할 수 있는 개인 저장소
        - private ThreadLocal<String> nameStore = new ThreadLocal<>();
            - 동시에 접근하는 자원의 타입을 ThreadLocal 로 설정하고 기존 타입은 제네릭에 넣어서 사용
            - ThreadLocal.set() : 값을 저장
            - ThreadLocal.get() : 값을 조회
            - ThreadLocal.remove() : 값 제거 -> 쓰레드가 끝난 뒤에는 반드시 값 제거 필요함
5. DI
    - 기본
        private final MemberService memberService = new MemberService();

    - DI 1) 필드주입
        - 중간에 수정이 어려움
            @Autowired private MemberService memberService;

    - DI 2) 생성자주입
        @Autowired를 사용하여 스프링 컨테이너에 있는 객체를 가져옴 (DI)
        의존관계가 실행 중에 동적으로 변하는 경우는 거의 없기 때문에 생성자 주입을 권장
            private final MemberService memberService;
            @Autowired
            public MemberController(MemberService memberService) {
                this.memberService = memberService;
            }

    - DI 3) Setter 주입 (Setter Injection)
        public 으로 노출되어 있어야하고 어디서나 변경이 가능한 단점
            private MemberService memberService;
            @Autowired
            public void setMemberService(MemberService memberService) {
                this.memberService = memberService;
            }

    *주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용하며 정형화 되지 않고 상황에 따라 구현 클래스를 변경해야 할때는 설정을 통해 스프링 빈으로 등록한다.
    (@Bean)
    ** component scan 을 사용하여 코드를 작성시 예를들어 DB 변경시 설정변경이 많이 필요하나 스프링 빈으로 등록해서 Interface 구현체 부분만(new 선언) 수정해주면 되서 간단히 작업할 수 있다. **
    - @Autowired를 통한 DI는 스프링이 관리하는 객체에서만 동작하며 스프링 빈으로 등록하지 않고 직접 생성한 객체에서는 동작하지 않음


6. 타임존 설정


- Jvm Argument 로 넘기는 방법
    - 실행시
        - java -Duser.timezone="Asia/Seoul" com.example.Main
-  @PostConstructor
        - 코드상에 작성

            @EnableJpaAuditing
            @SpringBootApplication
            class QuizApplication() {

                @PostConstruct
                fun init() {
                    TimeZone.setDefault(TimeZone.getTimeZone("Asia/Seoul"))
                    TimeZone.getTimeZone("Asia/Seoul")
                }

            }

                fun main(args: Array<String>) {
                    runApplication<QuizApplication>(*args)

                }
