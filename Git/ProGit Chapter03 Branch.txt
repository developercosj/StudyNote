Branch

- 깃은 데이터를 Change Set 이나 Diff 로 기록하지 않고 일련의 스냅샷으로 기록한다.
- 커밋시 현 Staging Area에 있는 데이터의 스냅샷에 대한 포인터, 커밋메시지와 같은 메타데이터, 이전 커밋에 대한 포인터 등을 포함하는 커밋 캐체를 저장한다.
- git commit
    - 루트 디렉토리와 각 하위 디렉토리의 트리 개체를 체크섬과 함께 저장소에 저장
    - 그다음 커밋 개체 생성하고 메타데이터, 루트 디렉토리 트리 개체를 가리키는 포인터 정보를 커밋 개체에 넣어 저장
    -> 필요하면 언제든지 스냅샷 재생성
    - 각 파일에 대한 Blob, 파일과 디렉토리 구조가 들어있는 트리 개체, 메터데이터와 루트 트리를 가리키는 포인터가 담긴 커밋 개체가 생김
- Head
    - Git 'Head' 라는 특수한 포인터가 현재 작업하는 로컬 브랜치를 가리킨다.


- Fast Forward
    - Master와 Master 로부터 나온 브랜치인 Dev 브랜치가 있고 Dev 브랜치에 무엇인가 커밋이 추가된 상태일때 Master에 Dev 를 Merge 할 때 나오는 것으로
      Dev의 뿌리가 Master 이기 때문에 브랜치 포인터는 Merge 과정 없이 그저 최신 커밋으로 이동하는 방식
      Master 브랜치도 Dev 브랜치와 보는 것이 동일한 커밋으로 이동시킬 뿐

- 3-way Merge
    - 위의 Fast Forward에서 본 것처럼 Master에 Dev 브랜치의 내역을 Merge를 한 상황을 가정해볼때 Master에 Dev를 Merge 하기전 Master에서
      나온 Dev2 브랜치를 만들었다고 할때 Fast Forward를 통해 Master는 Master + Dev 커밋내역까지 반영되었기 때문에 Dev2 브랜치의 뿌리가 달라진 것임
      이때 Dev2의 변경사항을 Master에 Merge 할때는 Fast Forward로 Merge 하지 않고 각 브랜치가 가리키는 커밋 두 개와 공통 조상 하나를 사용하여 3 way Merge 를 한다.

- 충돌
    - 3-way Merge 실패
        - Merge 하는 두 브랜치에서 같은 파일의 한 부분을 동시에 수정하고 Merge 하면 Git은 해당 부분을 Merge 하지 못함
            Merge Conflict
        - 충돌이 일어난 파일은 unmerged 상태
        - git status 명령어를 이용해서 상태확인 (unmerged)
        - 충돌 표시부분에서 윗부분은 Head 버전 아랫부분은 충돌난 다른 브랜치
        - 위 또는 아래에서 고르거나 새로 작성하여 Merge 하는데 <<<<< ==== >>>>> 부분은 지워야한다.
        - 충돌된 부분을 해결하고 git add 명령으로 Git 에 저장
        - 충돌을 잘 해결하고 git status 를 확인하여 Staging Area 에 잘 올라갔는지( Changed to be committed) 확인 필요
        - 그리고 git Commit 을 하여 merge 한 것을 커밋한다.
