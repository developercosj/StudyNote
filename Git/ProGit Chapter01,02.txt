Chapter01, 02
- 버전관리

    - 로컬 버전관리(로컬 VCS)
        RCS (Revision Control System)
        Path Set(파일에서 변경되는 부분) 을 관리하여 특정 시점으로 되돌릴 수 있다.
    - 중앙집중식 버전 관리(CVCS)
        - 파일 관리 서버가 별도로 존재
        - 클라이언트가 중앙서버에서 파일을 받아서 사용 (checkout)
        - 중앙 서버에 문제가 생기면 모든 히스토리를 잃는다.
    - 분산 버전 관리 시스템
        - DVCS(분산 버전 관리 시스템)
        - 파일의 마지막 스냅샷을 Checkout 하는것이 아니라 저장소와 히스토리 모두 복제
        - Clone

- Git 기초
    - 델타 기반 버전관리시스템은 차이점만을 저장
    - 깃은 데이터를 파일 시스템 스냅샷의 연속으로 취급
    - 깃은 데이터를 저장하기 전에 항상 체크섬을 구하고 체크섬으로 데이터 관리
    - Git 은 SHA-1 해시로 체크섬을 만든다.
    - 파일을 이름으로 저장하지 않고 해당 파일의 해시로 저장한다.

- Git 파일 상태
    - Committed : 데이터가 로컬 데이터베이스에 안전하게 저장
    - Modified : 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것
    - Staged : 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태

- Git 프로젝트의 세가지 단계
    - Working Directory(워킹 트리)
        - 프로젝트의 특정 버전을 Checkout한 것
        - 깃 디렉토리는 지금 작업하는 디스크에 있고 그 디렉토리 안에 압축된 DB에서 파일을 가져와서 워킹 트리 생성
    - Staging Area
        - Git 디렉토리에 있다.
        - 곧 커밋할 파일에 대한 정보 저장
        (index, Staing Area)
    - .git directory (Repository)
        - 다른 컴퓨터에 있는 저장소를 clone 할 때 Git 디렉토리가 만들어짐
        - 파일들은 Committed 상태

- Git 과정
    - 워킹 트리에서 파일 수정
    - Staging Area 파일을 Stage 해서 커밋할 스냅샷을 만든다.
      모든 파일 추가할 수도 있고 선택하여 추가할 수도 있다.
    - Staging Area에 있는 파일들을 커밋해서 Git 디렉토리에 영구적인 스냅샷으로 저장

- 워킹 데릭토리(워킹트리) 파일 구분
    - Tracked(관리대상) -> Git 이 알고 있는 파일
        스냅샷에 포함돼 있던 파일
        - Unmodified(수정하지 않음)
        - Modified(수정함)
        - Staged(커밋 저장소에 기록할)
    - Untracked(관리대상이 아님)
        - Staging Area 에 포함되지 않는 파일들

- Changes to be committed
    - Staged 상태

- Changes not staged for commit
    - Tracked 되고 있는 파일의 변경사항이 staged 되지 않은 상태이므로 git add 를 해줌


- .gitignore
    - .gitignore 파일이 위치한 디렉토리와 그 하위 디렉토리에 적용
    - 아무것도 없는 라인 또는 #로 시작 라인은 무시
    - 표준 Glob 패턴 사용
    - /로 시작하면 하위 디렉토리에 적용되지 않음(현재 디렉토리는 무시하나, 하위 디렉토리는 무시하지 않음)
    - 디렉토리는 슬래시/를 끝에 사용하는 것으로 표현
    - !로 시작하는 패턴의 파일은 무시하지 않음

- 태그
    - 릴리즈 할때 사용
    - 태그 조회

    - 태그 종류
        - Lightweight 태그
            - 브랜치와 비슷하며 브랜치처럼 가리키는 지점을 최신 커밋으로 이동시키지 않는다.
            - 단순히 특정 커밋에 대한 포인터
            - 임시사용시 씀
            - 옵션 사용하지 않음
            - 파일에 커밋 체크섬을 저장하는 것
        - Annotated 태그
            - Git 데이터베이스에 태그를 만든 사람의 이름, 이메일, 날짜, 메시지등 저장
            - git tag -a <버전> -m "<메시지작성>"








