End-to-end tests
    최종 사용자의 흐름에 대한 테스트
    요청, 응답 테스트
Integration tests
    코드의 주요 흐름들을 통합적 테스트
    주요 외부 의존성 테스트 (DB 등)
Unit tests
    도메인 모델과 비즈니스 로직 테스트

- 테스트 코드 작성 이유
    - 테스트 코드는 당시 기능 테스트가 아닌 서비스 지속 가능성을 위한 테스트
    - 테스트가 문서의 역할을 한다면?
        -
    - 좋은 코드는 테스트하기 좋다.
    - 테스트 자동화
        - CI 에서 우리가 작성한 테스트 코드로 버그가 배포되는 것을 방지 가능
    - DAMP (Descriptive and Meaningful Phrases) 설명적인 구문을 사용하여 코드를 작성하자


- 좋은 테스트 작성 방법
    - 테스트 코드의 리팩토링은 중복을 줄이는 것이 아니라 더 서술적이고 의미있게 작성하는 방향 필요
    - 무작정 코드의 중복을 줄이면 테스트 간의 격리성이 떨어지고 테스트 본래의 의도가 점점 모호해져 파악을 제대로 할 수 없음
    - 테스트는 서로 독립적, 격리되어야 해서 테스트 수정에 다른 테스트가 영향을 받지 않도록 함
    - 함수나 클래스등을 사용하여 분리
    - 테스트 코드는 내부 구현보다 실행 결과에 집중하는 것이 필요
    - 좋은 테스트 코드는 이해가 쉽고 필요한 모든 정보를 가지고 있음
    - 모듈화(테스트 팩토리, 빌더, 핼퍼 메서드) 필요
    - 명확한 의도를 가진 이름은 개발자의 용어가 아닌 비개발자가 이해하기 쉽게 설명되어야 한다.
    - 테스트 코드 작성은 중요하지만 테스트 코드를 편리하게 작성하기 위해 운영 코드 설계 변경은 바람직하지 않음
    - 테스트가 어렵거나, 불가능한 영역이 전이되지 않게 격리 필요
    - 역할과 책임을 적절하게 분할하여 변경에 대비할 수 있고 테스트 코드를 통해서 검증할 수 있다.
        -> 테스트 코드가 주요 관심사가 아닌 부분에 할애하고 있는 것이 크다면 실제 구현 코드가 잘못됬을 수 있다는 것을 염두



- 테스트 구조
    - 준비
    - 실행
    - 검증
- 테스트 구조 패턴 종류
    - AAA 패턴 (Arrange-Act-Assert 주석으로 구분)
    - GWT 패턴 (given-when-then 행위 주석으로 구분)




출처 : https://tech.inflab.com/20230404-test-code/#%EB%84%A4%EB%B2%88%EC%A7%B8-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0-%EC%89%BD%EB%8B%A4