- KAKAO PAY tech 블로그 글 정리 및 공부 (https://tech.kakaopay.com/post/mock-test-code/)


1. Mock Server 기반으로 과도한 Mocking 테스트 코드를 작성하는 것은 그것과 직간접적으로 연관된 의존하는 곳에서 HTTP Mocking 관련 코드를 추가, 변경해야 하며 생산성 저하가 된다.

    - 1-1. @MockBean 기반의 객체 행위 Mocking 을 통한 폭넓은 테스트 케이스 커버
        - @MockBean 어노테이션으로 주입가능
    - 1-2. @MockBean 사용시 전체 테스트 코드 실행시 단점
        - @MockBean 을 Spring Boot 에서 테스트 시 사용할 때마다 mock instance 를 ApplicationContext 에 등록하며 실제 빈 definition을 대체한다.
        ** Performance: Loading the full ApplicationContext can be resource-intensive. For large applications, consider using more focused slice tests (@WebMvcTest, @DataJpaTest, etc.) to limit the context configuration.
        - ApplicationContext 를 초기화하는 시간이 계속 증가한다.
    - 1-3. @TestConfiguration 기반으로 Application Context 초기화 문제 해결
        - Mock 객체 자체를 실제 Bean 으로 등록해서 사용하도록 변경
            - @TestConfiguration 사용
            - @TestConfiguration
              class ClientTestConfiguration {

                  @Bean
                  @Primary
                  fun mockPartnerClient() = mock(PartnerClient::class.java)!!
              }
    - 1.4. 실제 Bean 으로 등록한 ClientTestConfiguration 를 다른 곳에서도 쉽게 사용할 수 있도록 하기 위해 java-test-fixtures 플러그인 사용
        - java-test-fixtures 이란 테스트 전용 코드나 리소스를 프로젝트의 여러 모듈에서 재사용가능하도록 함



# 참고 : @SpringBootTest : full application context 를 테스트를 위해 로딩

# 참고 : Mock 서버의 주요 개념과 장점

    - 가상 서버 환경 제공
        - 실제 서버의 응답을 흉내내어 클라이언트 요청에 대해 사전 정의된 응답 반환
    - 독립적 개발 진행
        - 프론트 앤드/ 백엔드 팀 동시에 개발 가능
        - Mock 서버를 통해 예상되는 API 응답 받을 수 있음
    - 예상된 시나리오 테스트
   - 테스트 자동화

   - Mock 서버 구현 방법
    - 도구 및 프레임워크 사용
        - Postman, WireMock, Mockoon
    - 코드로 구현

    - 출처 : Chat GPT [Mock 서버란 뭐야?]

