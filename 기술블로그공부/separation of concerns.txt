블로그 : https://velog.io/@eddy_song/separation-of-concerns

어떻게 해야 소프트웨어를 잘 나눌 수 있을까?
어떻게 하면 관심사/역할의 분리를 잘할 수 있을까?


응집도/결합도

결합도 : 선을 그어진 내부의 것들이 외부와 얼마나 관계가 있는가
응집도 : 선을 그어진 내부의 것들 사이에 공통적인게 얼마나 깊으냐


클린코드 : 함수는 최대한 작게 한가지 일만 하도록 할 것

캡슐화 : 인터페이스와 구현을 중심으로 관심사를 분리

    - 인터페이스 : 다른 객체가 의존하고 있는 부분이기 때문에 가급적 바뀌면 안된다.
    - 구현 : 디테일하게 어떤 것을 할 것인지
    # 대부분의 객체 지향 언어는 프로퍼티나 메서드 앞에 Public, Private 처럼 구분할 수 있는 접근 제어(Access control) 기능을 제공한다.
    캡슐화를 잘 해놓으면, 객체는 다른 객체에게 영향을 주지 않고 독립적으로 구현을 바꿀 수 있게 된다.

객체를 잘 나누려면 변경이유를 기준으로 나눠라
인터페이스를 잘 나누려면 클라이언트 기준으로 나눠라

레포지토리 패턴 : 비즈니스 로직과 데이터 접근을 분리
    # 데이터 접근 : 외부 서버에 HTTP 요청을 보내거나(Networking Layer) 로컬 데이터베이스에 쿼리를 보내는 걸(Persistence Layer) 의미한다.
    - 데이터 출처와 비즈니스 로직 사이에 레포지토리라는 새로운 레이어를 하나 만들고, 이 레이어에서 데이터 접근을 모두 처리


레이어간 의존성 원칙 : 안쪽 레이어는 바깥쪽 레이어에 대해서 전혀 몰라야 한다.
