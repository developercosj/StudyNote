- 자료형
    - int, String, Float

- 변수 선언 방식
 *초기화를 하거나 반드시 데이터자료형을 넣어줘야 한다.
    - val(value) - 불변형(immutable)
        val username: String = ""
        선언키워드 변수이름: 자료형 = "값"
        * 초기값을 설정하고 나면 변경이 불가하다.
        *자료형은 생략이 가능하다.

    - var(variable) - 가변형(mutable)


- 예시
    val username = "sujeong" // 자료형 추론이 가능하기 때문에 String 으로 결정되어서 자료형을 생략 가능
    var username // 자료형을 지정하지 않는 변수는 사용할 수 없다 (가변형)
    val init: Int // 사용전 혹은 생성자 시점에서 init 변수를 초기화가 필요
    val number = 10 // Int 형으로 추론함


- 기본형인 자료형은 자바에 있고 코틀린은 참조형을 사용
    - 기본형
        가공되지 않은 순수한 자료형으로 프로그래밍 언어에 내장
        int, long, float, double

    - 참조형
    Int, Long, Float, Double 등
    -> 성능을 위해서 코틀린 컴파일러가 자동으로 기본형으로 변환해줌

- 자료형 생략
    - 명시적으로 자료형을 지정하지 않으면 Short형 범위의 값도 Int 형으로 추론
    - Short 형으로 지정하고 싶으면 명시적으로 선언 필요
    -
- 접미사 접두사 사용
    val exp01 = 123 //Int 형 추론
    val exp02 = 123L // Long 형 추론
    val exp03 = 0x0F // 16진수 표기가 사용된 Int 형으로 추론
    val exp04 = 0b00001011 // 0b 를 사용해서 2진 표기가 사용된 Int 형으로 추론
    - u 접미사 붙이면 부호없는 정수 자료형 선언
    - uL 접미사 붙이면 부호없는 Long 형 자료형 선언
- _(언더바) 사용하면 읽기 쉬우나 데이터숫자에는 영향 x
    val num = 1_000_000
- 실수 자료형
    - 일반 수학 : 3.14 *10^16
    - 소스코드상 : 3.14E+16
        - 16은 이동할 자리수
        - '-' 혹은 '+' 부호 사용(E는 생략가능)

- 자료형의 최소 최대
    - 음수는 2의 보수 표현을 사용해 연산된다. 절댓값의 이진수에 값을 뒤집고 1을 더한다
        예시) -6
        1. 6의 2진값 : 0000 0110
        2. 값 뒤집기 : 1111 1001
        3. 1을 더하기 : 1111 1010
- 문자열
    JVM 안에 Heap (동적 공간) 에 String Pool 이 있고
     Stack에 있는 값들의 주소가 저장되어 있다.
    var 로 선언된 str1의 참조 주소는 가변형으로 바뀔 수 있으나 일단 선언되 생성된 값(Hello)의 메모리 공간의 변경되지 않아 변경이 불가능하다.
    var str1: String = "Hello"
    값을 변경하면 -> 새로운 공간이 String Pool 에 만들어져서 바뀌는 것이지 Hello 의 공간이 바뀌지 않는다.

- ===
    참조가 같은지 확인

- 문자열
    var a = 1
    var str1 = "a is $a" 로 작성 가능
    var str2 = "a is ${a + 1}"
- \
    "를 사용하는 것 명시할때 사용
    \"


- null
    - 코틀린의 변수 선언은 기본적으로 null을 허용하지 않는다.
        - val a: Int = 30
        - var b: String = "Hello"
        -> 컴파일단계에서 선언이 안되어 있으면 문제 발생하기 때문에 초기화 필수
    - null 가능
        - val a: Int? = null (위의 a와 완전히 다른 타입임)
        - var b: String? = null


    - 세이프콜 ? 기호
        str1?.length -> str1이 null 이면 length 를 실행하지 않고 null 을 반환해줌
    - !!
        널일 가능성이 없다.
    - val len = if (str1 != null) str1.length else -1
    - 엘비스 연산자
        - val len = str1?.ength ?: -1
    - 함수 파라미터에서 ? 사용 예시
        - fun set(a:String, b:String?) {

        }

- 자료형 변환
    - 변환 메서드
    var a: Int = 1
    val b: Double = a.toDouble()
- wkfyguddml wkehd qusghks
    - var result = 1L + 3 -> Long + int -> Long

- 이중부호와 삼중 부호
    - val a: Int = 128
    - val c: Int? = a
    - val d: Int? = a
    - val e: Int? = c
    // c == d true
    // c === d false
    // c === e -> 둘다 객체 참조형

    // 여기서 c 는 기본적으로 객체형이기 때문에 a 와 주소가 같지 않음

    * 코틀린에서는 참조형으로 선언한 변수의 값이 128~127 범위에 있으면 캐시에 그 값을 저장함
- Number 형
    숫자를 저장하기 위한 특수한 형태 값에 따라서 Int, Float, Long, 형으로 스마트 캐스트
- num is Int , num !is Int
    -> boolean으로  num 변수 형검사
- Any 형
    - 자료형이 정해지지 않은 경우
    - 모든 클래스의 뿌리
    - 언제든 필요한 자료형으로 스마트 캐스트
    - 파라미터
        fun checkArg(x: Any) {
            ...
            if (x is String) {

            }
            if (x is Int) {

            }
        }

- 함수
    fun sum(a: Int, b: Int): Int {
        var sum = a + b
        return sum
    }
    fun 함수이름(파라미터): 반환타입 {

    }
    - ': 반환타입' 생략가능
    - void 같은것이 Unit 이며 Unit은 반환값으로 void가 값이 아예없는것과는 다름
    - 간략한 함수
        fun sum(a: Int, b:Int): Int = a + b

    - 반환 자료형 생략
        fun sum(a: Int, b:Int) = a + b
    - Unit 반환 값이 없을때
        - fun outfunc(name: String): Unit {
            println("Name: $name")
            // return Unit이 생략되어 있음
        }
    - 리턴값 줄여쓰기
        - fun sum(a: Int, b: Int) = a + b
    - 디폴트 값 지정
        - 값을 넣어주지 않고 생략하면 파라미터가 디폴트로 5의 값이 사용됨
        - fun sum(a: Int, b: Int = 5) = a + b
    - 파라미터 값을 지정
        - fun sum(a: Int = 2, b: Int = 5) = a + b
        - sum(b = 2)


    - 파리미터 여러개
        - vararg를 사용하여 여러개 변수 생략(같은 타입)
        - fun normalVarargs(vararg a: Int) {
            for (num in a) {
                println(num)
            }
        }
          normalVarargs(1,2,3,4)

- 스택과 힙
    - 스택
        - 각 여러개의 함수의 프레임(main(), max()....) 과 그안에 지역변수
    - 힙
        - 동적객체


- 함수형 프로그래밍 (함수를 여기저기 적용가능 변수등..)
    - 순수함수
        - 부작용이 없는 함수 (동일한 입력 -> 동일한 결과 출력)
        - 값이 항상 예측이 가능한 결정적
        - 다른 것에 의존하여 값이 항상 달라지는 것은 순수함수가 아님
        - 입력값과 무관하게 외부의 변수를 사용하는것 (외부 변수에 의존)은 순수함수가 아님
        - 모듈화 가능, 재사용성 높음
        - 병행작업에 안전
        - 테스트, 디버깅에 유리
        - 함수자체를 매개변수, 인자나 반환값에 적용 가능) -> 고차함수
        - 함수를 변수나 데이터 구조에 저장이 가능하다.
        - 유연성있음
    - 람다식 (이름없는)
        - 익명함수의 하나의 형태로 이름 없이 사용 및 실행이 가능
        - 람다 대수로부터 유래
        - 고차 함수에서 인자로 넘기거나 결과값등으로 반환할 수 있음
        - -> 기호가 중요
    - 일급객체
        - 일급 객체는 함수의 인자로 전달할 수 있다.
        - 일급 객체는 함수의 반환값에 사용 가능
        - 변수에 담을 수 있음
    - 코틀린의 함수는 1급함수 1급객체로 다룬다.
    - 고차함수
        - 람다식 함수를 인자로 넘김
        - fun highFunc(sum: (Int, Int) -> Int, a: Int, b: Int): Int = sum(a,b)
          fun highFunc(sum: (Int, Int) -> Int, a: Int, b: Int): Int {
            return sum(a,b)
          }
        - fun highFunc(sum: (Int, Int) -> Int, a: Int, b: Int): Int {
            return sum(a,b)
        }
          val result = highFunc({x, y -> x + y}, 1, 3)
          val result = highFunc2(1, 3) {x, y -> x + y}
          val result = highFunc3(1, 3) {x, y ->
            x + y
          }
    - 람다식이 할당된 변수는 함수처럼 사용 가능
        val multi = {a: Int, b: Int -> a * b}
        val multi: (a: Int, b: Int) -> Int = {a, b -> a * b}
        result = multi(10,20)
    - 자료형의 생략
        val multi: (Int, Int) -> Int = {x: Int, y: Int -> x * y} // 타입이 생략되지 않은 전체 표현
        val multi = {x: Int, y: Int -> x * y} // 타입이 생략되었을때는 대입값의 인수의 타입 생략 불가 (x,y의 타입)
    - 매개변수가 없을때
        // 매개변수가 없어서 대입값에도 '매개변수 -> '가 존재하지 않음
        val greet: () -> Unit = {println("sujeong"}
    - 람다식안에 람다식이 존재 가능
        val nestedLambda: () -> () -> Unit = {{ println("nested")}}

    - 선언부의 자료형 생략
        - val greet = {println("sujeong")} // 파라미터랑 결과값 없음
            () -> Unit 생략됨
        - val square = {x: Int -> x * x} // 선언부 생략했기 때문에 x의 자료형 작성 필수

     - 리턴값으로 다른 함수 사용 가능
        fun sum(a:Int, b:Int) = a + b
        fun funcFunc(a:Int, b: Int): Int {
            return sum(a,b)
        }
        fun funcFunc(a:Int, b: Int) = sum(a,b)


    - 값에 의한 호출
    - 파라미터에 람다식함수()가 들어가 있다면 처음 파라미터의 람다식함수를 먼저 호출
    - 파라미터에 이름으로 호출하느냐 vs 이름() 처럼 함수로 호출하느냐에 따라서 람다식 함수를 먼저 실행하고 가느냐 나중에 그 함수가 불리면 그때 실행하느냐가 나눠짐

        - callByName
        // b() 할떄 otherLamda 가 호출
        val result = callByName(otherLamda)
        fun callByName(b: () -> Boolean): Boolean {
        println("1")
        return b();
        }
        - CallByValue
        // 파라미터에서 먼저 otherLamda 사용
        val result = callByValue(otherlamda())
        func callByValue(b: Boolean): Boolean {
            println("")
            return b;
        }

       val otherLamda: () -> Boolean = {
           println("")
           true
       }
       - ::
        fun sum(x: Int, y: Int) = x + y
        funcParam(3,2,sum) // sum은 람다식이 아니기 때문에 오류가 발생함
        func funcParam(a: Int, b: Int, c: (Int, Int) -> Int): Int {
            return c(a,b)
        }
        람다식 형태로 써있지만 함수 이름을 쓰고 싶을떄
        funcParam(3,2, ::sum) 을 사용하여 참조방식으로 사용 가능 -> 대신 파라미터, 결과값 형태가 같을때


        - 매개변수 없는 람다식
            - noparam({"sujeong"})
            - noParam{"sujeong"} // 위와 동일
            - func noParam (out: () -> String) = println(out())

        - 매개변수 한개일때
            - oneParam({a -> "sujeong $a"})
            - oneParam{a -> "sujeong $a"}
            - oneParam({"sujeong $it"}) -> 매개변수가 한개일때 매개변수를 지우고 it 으로 대체 가능 (한개일때만 사용)

        - 매개변수 개수에 따라 람다식을 구성하는 방법
            -
        - 매개변수 생략
            moreParam {_, b -> "Sujeong $b"}
        - 익명 함수 : 이름이 없는 함수
            - 람다식 함수에서는 return, break, continue 제어가 어렵기 때문에 함수 본문에 조건식에 따라 함수를 중단하고 반환해야 하는 경우에 일반 익명 함수로 표현할 필요가 있음

            - fun (x: Int, y:Int): Int = x + y
            - val add: (Int, Int) -> Int = fun(x, y) = x + y
            - val add = fun(x:Int, y:Int) = x + y // 익명함수
            - val add {x: Int, y: Int -> x + y} // 람다식과 매우 흡사하고 return, break, continue 등 사용하기 어려움
        - 인라인 함수
            - 함수가 호출되는 곳에 내용을 모두 복사해 넣어 함수의 분기 없이 처리되어 코드 성능 향상
            - 호출 x 복사 o
            - 코드가 복사되므로 내용이 많은 함수를 사용할때 코드가 늘어남
            - 일부 람다식 함수를 인라인 되지 않게 하기 위해 noinline 키워드 사용
            - func shortFunc() {
                println("sujeong")
            }
            - inline shortFunc(a: Int, out: (Int) -> Unit ) {
                println("sujeong")
                out(a)
            }
            - shortFunc(3, {a -> println("a : $a")} )
            - shortFunc(3, {println("a : $it")} ) // 위와 동일
            - shortFunc(3) {println("a : $it")}  // 위와 동일


        - 함수의 범위
            - 지역변수
                - 중괄호내의 범위에서 사용
            - 전역변수
                - 중괄호 외부 범위에서 사용
            - 지역함수
                - 특정 함수 내에 선언 ( 앞쪽에 먼저 선언이 되어 있어야함 뒤에서 사용이 가능)
            - 최상위 레벨 함수
                - 선언 위치가 어디든 호출 가능

- 구조
    - Project - Module - folder, file
    - 물리구조 vs 논리 구조
    - 공유
        - 같은 패키지 내에서 변수, 함수, 클래스를 이름만으로 공유해서 쓸 수 있음
        - 다른 패키지에서는 바로 쓸 수 없음
        - 다른 패키지 공유위해 import 키워드 작성 필수
    - 코틀린은 자바와 달리 하나의 파일안에 여러개의 클래스 넣는 것이 가능
    - 파일, 폴더의 물리적구조기준이 아니라 파일내에 있는 package 키워드를 기준으로 구분
- 패키지
    - 패키지 이름은 소문자로 작성
- object
    - class 키워드 대신 클래스를 정의함과 동시에 객체를 생성
    - 일반 클래스와 비슷하나(프로퍼티, 메서드, 초기화 블록) 생성자는 가질 수 없다.
    - 클래스 상속, 인터페이스 구현
    - 자식 클래스를 가질 수 없다.
- `const`
    - const val : 컴파일 시간에 결정되는 상수
    - val : 런타임에 할당 컴파일 시간동안 할당 필요
    - 함수나 어떤 클래스의 생성자에게 할당 불가
    - 문자열이나 자료형 할당 필요



    람다식, 고차 함수, 순수함수