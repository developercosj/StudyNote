- 자료형 오류 미리 파악가능한 정적 언어 (Statically typed)
- Null 포인터로 인한 프로그램 중단 예방 가능
- 데이터형 선언 시 널 가능한 형식과 불가능한 형식 지원
- 함수형 프로그래밍과 객체 지향 프로그래밍 모두 사용 가능


- 필드와 프로퍼티
    - 자바에서는 클래스의 멤버변수를 필드라고 하고 코틀린에서는 프로퍼티라고 하는데 필드는 실제로 멤버변수의 값
    - 자바 클래스의 멤버 변수는 값만 갖고 있기 때문에 필드라고 칭함
    - 코틀린에서 클래스의 멤버 변수를 선언하게 되면 자바 바이트코드 상 자동으로 Getter, Setter 생성
    - 코틀린에서는 멤버 변수를 직접 다루는 형태로 사용 (실제는 아님)
    - 코틀린의 클래스의 프로퍼티는 단순 멤버 변수보다 더 광범위한 개념 지칭


- 동등비교 (==, ===, equals)
    - 원시 타입 두개를 비교할 때는 == 연산자 사용
    - 참조타입비교시 다르게 동작한다.
        - ==는 내부적으로 equals 를 호출한다. 따라서 String 비교할때도 == 를 비교하면 서로 문자열이 같은지 비교가 가능하다.
        - 참조타입의 주소값을 비교하고 싶을때
        - 자바에는 없지만 ===을 가지고 참조를 비교할 수 있다.
        - 자바의 주소값 비교인 ==와 코틀린의 주소값 비교인 ===가 같게 된다.



- companion object
    코틀린은 static 지원하지 않고 패키지 수준의 최상위 함수와 객체 선언을 통해 static 메서드의 역할을 한다


- 클래스 기본은 public

- 코틀린의 프로퍼티(필드와 접근자 메서드를 통칭)는 기본적으로 선언과 초기화를 해줘야 한다.


- kotlin의 생성자
    - 클래스 생성자
        - 생성자는 constructor라는 키워드를 통해 선언 가능
        - 생성자 파라미터 앞에 var/val 로 선언하면 해당 파라미터의 값이 클래스의 멤버 프로퍼티로 선언된다. 파라미터에 전달된 값으로 초기화됨
        - 기본값을 설정하면서 생성자 오버로드를 줄일 수 있다.
        - 코틀린의 프로퍼티는 자동으로 getter와 setter 구현 (val : getter, var : getter, setter)



-  중첩클래스(Nested Class)
 : https://engineer-gyu.tistory.com/27


- 형변환

    - Kotlin 의 기본 자료형들은 변수에 대입 시 자동 형변환 지원하지 않음
    - to자료형() 함수로 형변환
        -> 반환하고자 하는 자료형으로 변환할 수 없을떄 NumberFormatException 을 던진다.

