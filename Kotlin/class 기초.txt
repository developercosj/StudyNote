- abstract class
    abstract class는 그 자체로 인스턴스화 될 수 없는 클래스
    여러 클래스에서 공통으로 쓰는 프로퍼티와 메서드를 모아놓는 용도
    * concrete type은 그 자체로 인스턴스화 할 수 있는 타입
    미완성됨 -> 인스턴스가 불가능
    미완성된 변수나 함수에는 abstract modifier 가 앞에 추가됨
    내부 변수나 함수 또한 abstract으로 만들 수 있음
    -> 미완성된 값들은 abstract을 구현하면서 반드시 구현이 필요하다.
        구현방법 : 생성자에 넣어서 생성함, custom get 사용하여 구현
        abstract fun 은 override 되어 구현되어야 한다.
        나머지 abstract가 붙지 않은 것들을 구현이 필수적이지 않다.
        abstract class 는 내부에 구현체가 있으면 구현체에 의존적이게 될 수 밖에 없어 유연성이 감소할 수 있다.
- open

    * 코틀린에서의 클래스와 메서드는 기본적으로 final
    어떤 클래스의 상속을 허용하려면 해당 클래스 앞에 open 변경자 필요
    오버라이드가능한 메서드나 프로퍼티 앞에서도 open 변경자 필요


- data class
    데이터 클래스는 toString(), hashCode(), equals(), copy() 메서드를 자동으로 만들어주는 클래스다.



- value class (값 클래스)
    - 참조 타입이 아닌 타입 정의 가능

- 수신 객체(receiver) : 수신 객체는 프로퍼티에 접근할 때 사용해야 하는 객체를 지정한다.
    - 프로퍼티는 어떤 클래스의 구체적인 인스턴스와 엮어 있기 때문에 이 인스턴스를 식으로 지정해야 한다.
    - 멤버 함수의 경우에도 똑같이 수신 객체가 있고, 이런 경우 멤버 함수를 메서드라고 부른다.
    - 수신 객체를 모든 클래스 멤버에게 암시적으로 제공되는 사용 가능한 추가 변수라고 생각 가능
    - 클래스 내부에서는 this 로 이 수신 객체 참조 가능
    - 수신 객체의 멤버 안에서 수신 객체의 멤버를 참조할 때는 this 를 생략해도 된다. 하지만 어떤 클래스의 프로퍼티와 메서드 파라미터 이름이 같을때는 이 둘을 구분하기 위해 프로퍼티 이름 앞에 this 써야한다.
        class Person {
            var firstName: String = ""
            fun show(firstName: String) {
                this.firstName = firstName
            }
        }
    - 프로퍼티가 사용하는 내부 필드는 항상 캡슐화 되어 있고 클래스 정의 밖에서는 이 내부 필드에 접근 불가


- 생성자
    - 생성자 호출을 사용하면 프로그램이 새 인스턴스에 대한 힙 메모리를 할당한 다음, 인스턴스의 상태를 초기화해주는 생성자 코드를 호출해준다.
    - 코틀린에서는 자바와 달리(new 키워드) 특별한 키워드 사용하지 않고 함수호출과 동일하다.
    - 클래스의 파라미터 목록으로 주 생성자 선언(primary constructor)을 한다.
    - 주 생성자는 프로퍼티 초기화 + 초기화 블록 (init) 처리
        init {}
    - init 초기화 블록이 클래스 안에 여러개가 들어갈 수 있다.(순서대로 실행)
    - class 클래스이름(초기화 프로퍼티 들어감) -> 이렇게 초기화 가능할 수 있지만, 클래스 구현쪽에 프로퍼티 정의하고 init 에서 초기화도 가능하다.
    - init 문에는 return 추가가 불가함

        class 클래스이름() {
            val 프로퍼티 이름: String
            init {
                여기에서 프로퍼티 초기화도 가능
                프로퍼티 이름 = ""
            }
        }
    - 생성자 파라미터의 값을 지정할 멤버 프로퍼티를 정의해야 한다. 멤버 프로퍼티가 없이 멤머 메서드등에서는 사용할 수 없다.
        class 클래스이름(fullName: String)
        -> kotlin 에서는 생성자 파라미터 앞에 val, var 키워드를 붙여서 자동으로 해당 생성자 파라미터로 초기화되는 프로퍼티 정의 가능 하며
           이것을 프로퍼티 초기화나 init 블록 안에서 참조하면 생성자 파라미터를 가리키고, 다른 위치에서 참조하면 프로퍼티를 가리키게 된다.
           예시 )
                class 클래스이름(fullName: String) {
                val fullName: String  = fullName
                }
                을 아래와 같이 변경 가능

                class 클래스이름(val fullName: String) {
                }
    - vararg 생성자 파라미터에 사용 가능
    - 부 생성자 사용 가능
        - constructor 키워드 사용
            - constructor(fileName: String) {
                this.fileName = fileName
            }
        - 부 생성자는 return 가능 기본적으로는 unit 타입을 반환함
        - init 블록과 프로퍼티 초기화 는 한번만 실행됨
        - 부생성자의 파라미터 목록에는 val/var 키워드를 쓸 수 없다.


- 멤버 가시성 (접근제어자)
    - public(공개, default) : 어디서나 접근 가능
    - internal(모듈 내부) : 멤버가 속한 클래스가 포함된 컴파일 모듈 내부에서만 가능

    - protected : 멤버가 속한 클래스와 멤버가 속한 클래스의 모든 하위 클래스 안에서 가능
    - private : 멤버가 속한 클래스 내부에서만 볼 수 있다.

- 디폴트 접근 제어자
    - 코틀린의 기본 클래스 접근 제어자 : public
    - 자바에서는 기본적으로 pacakge 안에서만 사용 가능한 접근제어자(package-private)가 기본이다(접근제어자 생략시) -> 동일한 패키지 내에서만 사용 가능
        - private : private 접근 제어자는 해당 클래스 내부에서만 접근이 가능하다.
    - 자바는 public (공개)클래스는 파일 이름이랑 class 명이랑 동일해야한다. 코틀린은 엄격하진 않음
    - 자바는 여러개의 클래스를 한 파일에 넣을 수 있으나 public class는 그 안에서 하나여야 한다.

- 가시성 변경자
    주생성자의 가시성을 지정하려면 constructor() 키워드 명시 필요
    class 클래스이름 private constructor() {
        // 클래스 본문 외부에서 인스턴스 불가함 (private)

    }

- 중첩 클래스(nested class)
    - 코틀린 내부 클래스는 자바와 달리 inner 변경자가 붙는다.
    - 자바는 디폴트가 내부 클래스이고 내부 클래스와 외부 클래스가 연관되지 않음을 표기하기 위해서는 명시적으로 static 을 붙여야 하지만,
        코틀린은 inner 가 붙지 않은 내부 클래스라면 외부클래스의 인스턴스와 연관되지 않는다.
        * 내부 클래스는 관련 있음 내포클래스는 그냥 안에 있는거고
    - 자바와 달리 바깥쪽 클래스는 중첩 클래스의 비공개 멤버에 접근 불가
    - this 는 가장 내부의 클래스 인스턴스를 가리킴 따라서 내부 클래스 본문의 this 는 내부 클래스 자신이며 외부 클래스 인스턴스를 가리킬땐 this@외부클래스이름


- 지역 클래스
    - 함수 본문에 클래스 정의 가능


- Immutable 클래스 (불변 클래스)
    - 객체 생성 후 속성을 변경할 수 없는 클래스
    - Kotlin 의 data class 에서 val 만 쓰면 불변 클래스가 된다.
```
    data class User(val name: String, val age: Int)
```


- sealed class
    - sealed class 는 상속을 제한하는 클래스
    - sealed class 를 상속받는 클래스는 반드시 같은 파일에 정의되어야 한다.
    - sealed class 는 주로 when 식에서 사용되며, 모든 하위 클래스가 알려져 있기 때문에 when 식에서 else 분기를 생략할 수 있다.
    - sealed class 는 abstract class 와 비슷하지만, sealed class 는 상속을 제한한다는 점에서 다르다.
    - sealed class 는 주로 상태를 나타내는 데 사용된다.