TDD, 리팩토링은 운동이고 평생동안 해야한다.

1. 프로그래밍 제약사항을 넣어서 개발 연습해보기
    - 자바 코드 컨벤션 지키면서 프로그래밍하기
    - indent(들여쓰기) depth를 2이하 -> 1이하로 줄여보면서 depth 넘지 않도록 구현 (while 문 내부 if문 : 들여쓰기 2)
    - indent depth 를 줄이는 좋은 방법은 메서드를 분리해서 작성
    - 메서드가 한가지 일만 하도록 최대한 작게 만들기
    - space(공백)도 convention 이다. for, while, if 문 사이의 space 도 convention
    - 불필요한 공백라인을 만들지 않음
        공백 라인을 띄우는 것 또한 의도를 가지고 작성하기
        git commit 메시지를 의미있게 작성 (작업한 내용에 대한 이해 설명)
    - else 예약어를 쓰지 말고 if 조건절에서 return 하는 방식으로 구현해보기
    - java api를 활용(메소드 직접 구현하기 전에 기능 검색)
    - 파라미터 갯수도 줄여나가보기
    - 로컬 변수 사용필요 없으면 사용하지 않도록 하기
    - 패턴 적용해보기
    - markdown에 기능 목록 작성
2.리팩토링 연습
    - 클래스 분리
    - 1급 콜렉션을 쓴다.
    - 3개 이상의 인스턴스 변수를 가진 클래스를 쓰지 않는다.
3. 단위테스트 연습
    - api 사용법으로 시작해보기
    - Input/Output이 명확한 클래스 메소드(Uilt 성격 메서드)로 연습
    - 알고리즘으로 연습
4. TDD 연습
    TDD Circle of life : Test Fails -> Test Passes -> Refactor
    main 메서드 안만들고 전체 프로그램 실행가능하면 성공
    의존 관계 추가를 통해 난이도 높이기
5. 필요 역량
    - 테스트하기 쉬운 코드와 테스트 하기 어려운 코드를 보는 눈
    - 테스트하기 어려운 코드를 테스트 하기 쉬운 코드로 설계하는 감
6. 더 나아가기
    - 컴파일 에러를 최소화하면서 리팩토링
    - ATDD 기반으로 응용 애플리케이션 개발
    - 레거시 애플리케이션에 테스트 코드 추가해 리팩토링
