Fetch Join

- JPQL 에서 성능 최적화를 위해 제공
- 연관된 엔티티나 컬렉션을 SQL 한 번에 함께 조회
- join fetch 명령어 사용
-
    JPQL : select m from Member m join fetch m.team
    SQL : select M.*, T.* FROM MEMBER M INNER JOIN TEAM T ON M.TEAM_ID = T.ID
        -> T.* 것도 모두 조회함

- 페치 조인 = [LEFT, INNER] JOIN FETCH
    - 페치 조인을 사용하게 되면 프록시 객체가 아니라 join 으로 객체를 다 들고 왔기 때문에 쿼리를 다시 요청하지 않음
    - 지연로딩으로 세팅을 하더라도 Fetch Join 이 더 우선
- 컬렉션 Fetch join
    *일대다, 컬렉션 페치 조인
    JPQL : select t from Team t join fetch t.members where t.name = 'A'
    SQL : SELECT T.*, M.* FROM TEAM T INNER JOIN MEMBER M ON T.ID = M.TEAM_ID WHERE T.NAME = "A
    1:N -> N 만큼 중복되서 나오기 때문에 distinct 사용해줄 수 있음
     # DB에서는 Distinct 를 적용되려면 완전히 동일한 객체여야 하나 JPA 에서 Distinct 를 사용하게 되면
       컬렉션에서 중복을 또 감지해서 없애준다. 같은 식별자를 가진 엔티티를 제거해준다.

- 페치 조인과 일반 조인의 차이
    - JPQL 은 결과 반환시 연관관계를 고려하지 않고 select 절에서의 엔티티만 조회한다.
    - 페치 조인을 사용하게 되면 즉시로딩되서 연관된 엔티티가 함께 조회
    - 페치조인은 객체그래프를 SQL 한번에 조회

- 페치 조인 특징
    - 페치 조인의 대상에는 별칭을 줄 수 없음(하이버네이트에서는 가능하나 사용하지 말것)
        join fetch t.members as m (X)
    - 둘 이상의 컬렉션은 페치 조인 불가
        join fetch member, order -> 데이터 정합성이 안맞을 수 있음
    - 컬렉션을 페치 조인하면 페이징 사용 불가(setFirstResult, setMaxResults)
        #일대일, 다대일 같은 단일 값 연관 필드들은 페치 조인시 페이징 가능
        #일대다는 데이터가 ++++ -> 페이징 x  -> 데이터 정합성이 안맞음



