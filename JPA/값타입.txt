값타입

- JPA의 데이터 타입 분류
    - 1) 엔티티
        - @Entity로 정의하는 객체
        - 데이터가 변해도 식별자로 지속해서 추적 가능

    - 2) 값 타입
        - 자바의 기본 타입이나 객체
        - 식별자가 없기 때문에 변경시 추적이 불가하다.
        - 값 타입을 모두 불변객체로 만들어야 됨 ( 오류 발생시 찾기가 매우 어려워짐)
        - 종류
            - 기본값 타입
                - 자바 기본 타입(int, double)
                - 래퍼 클래스(Integer, Long)
                - String
            - 임베디드 타입(embedded type, 복합 값 타입)
                - 직접 커스터마이징해서 사용
            - 값 타입 컬렉션
                - 자바 컬렉션에 + 기본값/임베디드 타입 결합
        - 각 종류별 특성
            - 기본값 타입
                - 생명주기를 Entity에 의존
                - 값 타입의 value는 공유하면 안됨 (A1 의 객체의 기본값이 변경되면 A2 객체의 기본값이 변경되는것)
                - 자바의 기본 타입은 공유 XXX -> 안전
                - 기본 타입은 항상 값을 복사함
                - 레퍼 클래스인 Integer나 String 특수 클래스는 공유 가능한 객체이지만 (주소값 Reference 을 전달) 변경이 불가능
            - 임베디드 타입 (복합값 타입)
                - 새로운 값 타입을 직접 정의할 수 있음
                - JPA는 임베디드 타입
                - 기본 값 타입을 모아서 만들기 때문에 복합 값 타입이라고도 함
                - 임베디드 타입으로 사용하더라도 필드를 한 Entity에 쓰는것과 테이블이 변하는 것은 없음
                - int, String 과 같이 값 타입 (Entity 가 아님)
                - 즉시로딩 (같은 테이블 컬럼인데 당연히 같이 가져옴)
                - 사용법
                    - @Embeddable : 값타입 클래스 위에 정의(하위 클래스 위에 @Entity자리)
                    - @Embedded : 값 타입 사용 곳(최상위클래스에 있는 값엔티티 위에)
                    - 기본생성자 필수
                    - 만약 한 Entity에 @Embeddable이 붙은 같은 클래스를 여러개 넣으면 테이블 생성시 같은 이름의 컬럼이 여러개 생기기 때문에 불가능하나
                      @AttributeOverrides, @AttributeOverride(name="이름", column=@Colum(name="컬럼이름") 를 @Embedded 근처에 사용해서 컬럼 명 속성 재정의해서 다른 이름의 컬럼으로 만들 수 있다.

                - 값 타입이 엔티티 생명주기에 의존, 임베디드 타입또한 엔티티 생명주기에 의존
                - 장점
                    - 재사용가능, 높은 응집도
                    - 해당 값 타입만 사용하는 의미있는 메서드 생성 가능
                - Entity에 연결된 임베디드 타입에 Entity를 넣을 수 있다.
                - 주의점
                    - 객체 A 와 B 에 동일하게 embedded 객체인 C 를 넣어놓으면 객체 A 에 있는 C 를 변경한게 B 에도 영향이 동일하게 준다.
                      따라서 A,B 데이터를 다르게 관리하려면 C 를 embedded 객체가 아니라 Entity 로 만들것 또는 C newC =  new C(생성자를 만들었다면 값은 A 에 넣은 C 객체의 값을 get 으로 가져와서 넣어주면됨); 해서 작성하면 됨
                      -> primitive 타입은  값을 복사해서 사용하게 되면서 공유 참조로 인한 문제 예방되지만 embedded 타입처럼 직접 정의한 값 타입은 값을 대입하면 참조타입으로 값을 복사한다. 따라서 새로운 객체를 선언해 주는 것이 필요
                    - 객체를 수정해야 할때 완전 새로운 객체를 만들어서 수정할것

            - 값 타입 컬렉션 (List<값타입> 등으로 사용)
                - 별도의 테이블로 (1:다의 개념) 뽑아서 테이블 생성
                - Entity와는 다르게 pk 가 id 가 아니기 때문에 상위 객체(포함하고 있는객체)의 id는 FK 이면서 이 값과 + 나머지 필드 조합이 PK 가 됨 (여기 ID 가 있으면 Entity랑 다를게 없으니 ID 존재 x)
                - null 입력 불가, 중복 저장 불가
                - 값타입 여러개 저장시 사용
                - @ElementCollection, @CollectionTable 사용
                - DB 에는 객체의 컬렉션을 저장할 수 없어서 따로 테이블을 새로 생성 (1:N)
                - 생명주기는 소속 객체에 따른다.
                  값 타입 컬렉션은 영속성 전이(Cascade)와 고아 객체 제거기능을 포함하고 있다고 볼 수 있음
                - 조회시 지연로딩 전략
                - 값타입 수정시 인스턴스 자체를 다시 생성해서 새로 set 해야하며 get으로 가져온것을 set 으로 변경하면 안됨
                - collection 값 바꿔주면 jpa 가 감지하여 update
                - 기본적으로 지연로딩이기 때문에 상위 객체를 조회할때는 가져오지 않고 값 타입 컬렉션을 불러올때 쿼리가 나감
                    @ElementCollection(fetch = FetchType.LAZY) 가 기본
                - 엄청나게 간단한 것 할때만 사용하기
                - 사용 예시
                        @ElementCollection
                        @CollectionTable(name="FAVORITE_FOOD", joinColumns =  @JoinColumn(name="member_id"))
                        // 스트링이기 때문에 컬럼명을 지정해줌
                        @Column(name = "food_name")
                        private Set<String> favoriteFoods = new HashSet<>();

                        @ElementCollection
                        @CollectionTable(name="ADDRESS" , joinColumns =  @JoinColumn(name="member_id"))
                        private List<Address> addressHistory = new ArrayList<>();

                        - @JoinColumn(name="member_id") 는 외래키 (pk 중 하나)
                - 제약사항
                    - 값타입은 Entity가 가지고 있는 식별자 Id 값이 없기 때문에 변경사항 추적이 어렵다. 따라서 값 타입 컬렉션 변경사항이 발생하게 되면 주인 Entity(PK로 찾아서) 와 연관된 모든 데이터를 삭제하고, 값 타입
                      컬렉션에 있는 현재 값을 모두 다시 저장한다.
                      즉 지우지 않았어도 다 지우고 다시 넣게 된다는 것
                    - @OrderColumn(name="이름") 을 넣어서 컬렉션데이터에 순서가 생기기 때문에 update 쿼리가 됨 (delete + 다시 all insert 대신)
                        -> 하지만 이것도 위험하기 때문에 사용하지 말것

                    - 대안점
                        - 값타입 컬렉션 대신 일대다 관계(@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true), @JoinColumn()) 설정해서 설계할것 (그렇게 되면 Id pk 값이 생성됨)

- 불변 객체
    - 불변 객체를 만들어 객체타입 수정을 막을 수 있음
    - 값타입은 불변객체로 설정이 필요 (안정성)
    - 생성 후 변경이 이루어지지 않는 객체
    - 생성자로만 값을 설정할 수 있으며 setter 생성하지 않거나 setter를 private 으로 만들어 놓음
    - Integer, String 또한 불변 객체

- 값 타입 비교
    - 동일성(identity) 비교 : 인스턴스의 참조 값 비교 (==)
    - 동등성(equivalence) 비교 : 인스턴스의 값 비교 (equals())
        -> equals 구현해서 (hashcode 또한) object 하나씩 비교하는것을 override 한 뒤에 객체 비교시 항상 equals() 로 비교해야함

- 엔티티 타입과 값타입 비고
    - 1) 엔티티 타입
        - 식별자 존재함
        - 생명 주기 관리
        - 공유 가능
    - 2) 값타입
        - 식별자 없음(따라서 간단할때만 사용하고 그렇지 않으면 식별자가 있는 엔티티 타입으로 사용권장)
        - 생명주기를 속해있는 엔티티에 의존
        - 공유했을때 문제발생 가능 (복사해서 사용할것)
        - 불변객체로 만드는 것이 안전함