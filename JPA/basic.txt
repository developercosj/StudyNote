1. JPA
    - JPA 는 인터페이스의 모음으로 자바 진영에서 사용하는 ORM 기술 표준
    - JPA 2.1 구현체 : 하이버네이트, EclipseLink, DataNucleus

    - 1.0 : 초기버전으로 복합 키와 연관관계 기능등이 부족
    - 2.0 : 대부분의 ORM 기능 포함, JPA Criteria 추가

2. JAP 사용 이유
    - SQL 중심적 개발에서 객체 중심 개발 가능
    - 생산성 및 유지보수 향상
    - 패러다임의 불일치 해결
    - 성능 향상 부분도 존재
    - 데이터 접근 추상화와 벤더 독립성
    - 표준

3.  JAP 동작
    JPA는 JAVA 애플리케이션과 JDBC 사이에서 동작
    - Entity 분석
    - INSERT SQL 생성
    - JDBC API 사용
    - ResultSet 매핑
    - 패러다임 불일치 해결
        상속, 연관관계, 객체 그래프 탐색, 비교
    - 쿼리를 DB -> JDBC API 반환 후 Entity Object를 만들어서 DAO 에 반환

4. CRUD
    - 저장 : jap.persist(객체)
    - 조회 : jpa.find(객체)
    - 수정 : member.setName("변경이름")
        **트랜잭션 안에서 조회하여 변경하면 트랜잭션 끝날때 update 쿼리가 자동으로 실행
    - 삭제 : jpa.remove(객체)

5. 비교
    - 동일한 트랜잭션에서 조회한 엔티티는 같음을 보장
    - 예시
        String memberId = "100";
        Member member1 = jpa.find(Member.class, memberId);
        Member member2 = jpa.find(Member.class, memberId);
        member1 == member2; // 같게 결과가 나온다.
6. JPA 의 성능 최적화 기능
    - 1) 1차 캐시와 동일성(identity) 보장
        JPA 는 같은 트랜잭션 내부에서는 항상 같은 Entity를 반환해준다.
        DB Isolation level이 Read Commit이어도 애플리케이션에서 Repeatable Read 보장
        5번과 같은 경우는 member1은 SQL 을 처리하는 거고 member2는 캐시가 적용된 것이다.
    - 2) 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
        - 트랜잭션을 커미할 때까지 INSERT SQL 을 모아둬서 한번에 처리
        - JDBC BATCH SQL 기능을 사용해서 한번에 SQL 을 전송
        - 예시
            transaction.begin();
            em.persist(memberA);
            em.persist(memberC);
            transaction.commit(): // 커밋하는 순간 데이터베이스에 INSERT SQL 을 모아서 한번에 커밋한다.
    - 3) 지연 로딩(lazy loading)
        - 지연 로딩 : 객체가 실제 사용될 때 로딩
            - 예시
                Member member = memberDAO.find(memberId); //select * from MEMBER;
                Team team = member.getTeam();
                String teamName = team.getName(); // select * from TEAM;
        - 즉시 로딩 : JOIN SQL로 한번에 연관된 객체까지 미리 조회
            - 예시
                Member member = memberDAO.find(memberId); // SELECT M.*, T.* FROM MEMBER JOIN TEAM ...
                Team team = member.getTeam();
                String teamName = team.getName();


7. JPQL QueryDsl

- 사용시기
    - (인프런 김영한 선생님 답변을 기준으로)
        단순한 기능은 JPA
        조금 복잡해지면
            JPQL : 단순한것들이면 스프링 데이터 JPA 가 제공하년 @Query 어노테이션으로 작성하여 끝내는 것이 가능
            QueryDsl : 동적쿼리라면 반드시 사용, 커스텀 리포지터리 만들어서 사용해야함


    - JPQL 실제 구현 방식 (Spring)
        1. EntityManager (em.createQuery("select * from ...."))
        2. Repository interface 활용 (@Query)
    - JPQL 문제
        1. String 형태이기 때문에 개발자 의존적
        2. Compile 단계에서 Type Check 불가능 Runtime 에서 오류 발견 가능



    - QueryDsl 실제 구현 방식 (Spring)
        1. Spring Data Jpa Custom Repository
            - JpaRepository 인터페이스 생성
            - JpaRepository 인터페이스를 상속하여 Repository 인터페이스 생성
            - 기존 JpaRepository 를 상속받는 Custom repository 인터페이스 생성
            - 커스텀 구현 클래스의 경우 이름을 반드시 interface 이름 + Impl 로 만들어야 한다. (Jpa 에서 Injection을 할 때 해당 이름으로 생성된 클래스 기준으로 객체 삽입)
        2. QueryRepositorySupport
        3. JPAQueryFactory
            - QueryDsl 의 핵심 클래스
            - JPA 기반으로 쿼리 작성을 더욱 편리하게 해줌 EntityManager를 기반으로 JPA 쿼리를 생성하고 실행하는 기능을 제공해준다.
            - 동적쿼리, 재사용, 복잡한 쿼리등 장점을 많이 가지고 있음
            - config 생성

                @Configuration
                @EnableJpaRepositories("com.example.repository")
                public class JpaConfig {

                    @PersistenceContext
                    private EntityManager entityManager;

                    @Bean
                    public JPAQueryFactory jpaQueryFactory() {
                        return new JPAQueryFactory(entityManager);
                    }
                }
            - 사용하고자 하는 곳에 빈으로 등록해 놓은 JPAQueryFactory 를 선언해서 사용하면 됨
                private final JPAQueryFactory queryFactory;

    - QuerydslRepositorySupport (현재 소스 코드에 적용된 것 )
        1. 추상 클래스로서 QueryDsl 을 편하게 사용하기 위해 구현한 클래스


        - APT(Annotaion Processing Tool) : 어노테이션으로 정의된 코드를 기반으로 새로운 코드를 생성하는 기능 JDK 1.6 이상
        - Q도메인 클래스 생성됨
        - QueryDSL은 Entity 클래스와 Q Doimain 이라는 쿼리 타입의 클래스를 자체적으로 생성해서 메타데이터로 사용 -> SQL 쿼리 생성 제공

        - FetchResult deprecated
            : https://junuuu.tistory.com/894

