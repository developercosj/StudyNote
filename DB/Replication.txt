1. Replication : 한서버에서 다른 서버로 데이터를 동기화 (Replication_diagram.jpeg 참고)
    소스서버 : 원본데이터 서버
    레플리카 서버 : 복제된 데이터 가지는 서버

2. Replication 서버를 구축하는 목적
    - 스케일 아웃 : 하나의 서버에서 감당하기 어려울때, 트래픽 증가 대응 유연한 구조
    - 데이터 백업 : 레플리카 서버에서 백업시 백업 과정 중 실제 실행 중인 쿼리(소스서버)에 영향을 덜 줄 수 있음
    - 데이터 분석 : 무거운 쿼리 작업을 분리해서 작업 (데이터 분석 전담 서버)
    - 데이터의 지리적 분산 : 지리적으로 분포하여 실제 서비스에 가까운 곳에서 빠른 응답 가능

3. 바이너리 로그
    redo log : innodb engine 해당 로그, innodb engine level 의 물리적 로그, 복수의 고정 사이즈 파일로 구성
    binary log : 모든 engine 에 해당 로그, SQL statement 에 상응하는 논리적 로그 , 일련번호로 파일이 생성

4. Mysql 바이너리 로그
    Mysql 서버에서 발생하는 모든 변경사항을 로그파일에 저장
    - 데이터 변경 내역 (insert, update, delete ...)
    - 데이터베이스나 테이블의 구조 변경
    - 계정이나 권한의 변경
    - Mysql 복제시 바이너리 로그 파일을 사용

    #바이너리 파일 목록
    show binary logs;
    #바이너리 파일명, 위치
    show master status;
    - 복제 방법
        - 소스 서버에서 바이너리 로그 생성 -> 레플리카 서버로 전송 -> 레플리카 서버에서 로컬 디스크에 저장하고 레플리카 서버의 데이터에 반영하여 데이터 동기화함
        - 사용 스레드 종류
            - Binary Log Dump Thread(소스서버)
            - Replication I/O Thread(레플리카서버)
            - Replication SQL Thread(레플리카서버)
        - 변경내역 실별
            - Binary Log 파일 위치 기반 복제
            레플리카 서버에서 소스 서버의 바이너리 로그 파일명과 파일내 위치로 바이너리 로그 이벤트 식별하여 복제
            server-id 이용
            각서버마다 다른 id 로 설정, 레플리카 서버에는 꼭 지정 필요( default 는 1)
            - 글로벌 트랜잭션 ID 기반(GTID)
            각 이벤트들이 복제에 참여한 모든 MySql 서버들에서 동일한 고유 식별값인 GTID 글로벌 트랜잭션 id 로 식별
    - 바이너리 로그 형태종류
        - Statement 방식 : SQL 문 기록 (set global binlog_format = 'STATEMENT')
            - 트랜잭션 격리수준이 Repeatable-read 이상
            - 비확정적으로 처리될 수 있는 쿼리 실행시 소스 서버와 레플리카 서버에서 같은 SQL을 실행하더라고 하더라도 매번 결과가 달라질 수 있다. (order by 없는 구문 실행이나 날짜 조회등)
        - Row 방식 : 변경된 데이터 자체 기록
            - 비확정적 처리 쿼리를 사용할때 데이터가 달라질 수 있는 문제를 해결
            - 데이터를 일관되게 하는 안전한 방식
            - 변경 데이터가 전부 저장되며 용량 문제 발생 가능
            - 대부분은 statement 방식, 필요할때 row 방식
        - Mixed 방식 : Statement + Row
            - binlog_form mixed로 지정하여 사용
    - 복제 동기화 방식 (asynchronous_replication.jpg, Replication_diagram.jpeg 참고)
        - 비동기 복제
            소스서버가 레플리카 서버에서 변경 이벤트가 정상적으로 전달 됬는지 확인하지 않음
        - 반동기 복제
            - 소스 서버는 레플리카 서버가 소스 서버로부터 전달 받은 변경 이벤트를 릴레이 로그에 기록 후 응답을 보내야지 트랜잭션을 완전히 커밋한다.
            - 트랜잭션 처리 속도 느림
            - 타임아웃시간동안 응답이 없으면 비동기 방식으로 변경
    - 구성방식
        - 싱글 레플리카 복제
        - 멀티 레플리카 복제
        - 체인 복제
        - 듀얼 소스 복제
        - 멀티 소스 복제
